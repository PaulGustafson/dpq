module Basics where

-- Bool has to be defined before declaring Qubit->
-- Because object Qubit will generate SimpParam instance, which
-- need Bool->
data Bool = True | False

object Qubit

object Bit

id :: ! forall a -> a -> a
id x = x

swap :: ! forall a b -> a * b -> b * a
swap u = let (x, y) = u in (y, x)

uncurry' :: ! forall a b c -> (a -> b -> c) -> (a * b -> c)
uncurry' f = \ x -> let (a, b) = x in f a b

uncurry :: ! forall a b c -> !(a -> b -> c) -> !(a * b -> c)
uncurry f x = let (a, b) = x in f a b

curry :: ! forall a b c -> (a * b -> c) -> (a -> b -> c)
curry f = \ x y -> f (x, y)

-- The higher the number is, the lower the priority is->
infixr 30 $

($) :: ! forall a b -> (a -> b) -> a -> b
($) f x = f x

fst :: ! forall a b -> (Parameter b) => a * b -> a
fst x =
  let (x1, x2) = x in x1

snd :: ! forall a b -> (Parameter a) => a * b -> b
snd x =
  let (x1, x2) = x in x2




infixl 13 &&
infixl 13 ||

not :: ! (Bool -> Bool)
not b =
  case b of
    True -> False
    False -> True

(&&) :: ! (Bool -> Bool -> Bool)
(&&) a b =
 case a of
  True -> b
  False -> False

(||) :: ! (Bool -> Bool -> Bool)
(||) a b =
 case a of
  True -> True
  False -> b



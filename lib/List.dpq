module List where
import "lib/Vec.dpq"


data List a = Nil | Cons a (List a)

appendL :: ! forall a  . List a  -> List a -> List a
appendL l1 l2 = case l1 of
                  Nil -> l2
    	          Cons x xs -> Cons x (appendL xs l2)

mapL :: ! forall a b . !(a -> b) -> List a -> List b
mapL f l =
  case l of
    Nil -> Nil
    Cons x xs -> Cons (f x) (mapL f xs)

-- An isomorphism 
toNat :: ! (List Unit -> Nat)
toNat x = case x of
            Nil -> Z
            Cons y qs -> S (toNat qs)

vecToList :: ! forall a (n :: Nat) . Vec a n -> List a
vecToList v =
   case v of
     VNil -> Nil
     VCons x xs -> Cons x (vecToList xs)
     
listToVec :: ! (x :: List Qubit) -> Vec Qubit (toNat x)
listToVec x = case x of
                Nil -> VNil
                Cons y zs -> VCons y (listToVec zs)

-- listToVec does no appear to be that useful after all because the conversion is
-- not really free.
-- testCirc :: ! (n :: Nat) -> Circ(Vec Qubit n, Vec Qubit n)
-- testCirc n = box (Vec Qubit n) $ \ x . listToVec (mapL id (vecToList x))


unsafe_to_vec :: ! forall a . (n :: Nat) -> List a -> Vec a n 
unsafe_to_vec n l =
  case n of
    Z ->
      case l of
        Nil -> VNil
    S n' -> case l of
             Cons x xs -> VCons x (unsafe_to_vec n' xs)

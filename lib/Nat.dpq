module Nat where
import "lib/Basics.dpq"
import "lib/Equality.dpq"
-- import "lib/Class.dpq"




-- Natural numbers

data Nat = Z | S Nat

-- instance forall {n :: Nat} . Num (Real n) where
--   (+) x y = plusReal x y
--   (-) x y = minusReal x y
--   (/) x y = divReal x y
--   (@) x y = mulReal x y
--   (>) x y = ltReal x y
--   (<) x y = ltReal y x 
--   (>=) x y = ltReal x y || eqReal x y
--   (<=) x y = ltReal y x || eqReal x y  




data Maybe a = Nothing | Just a

iterN :: ! forall a . Nat -> !(a -> a) -> a -> a
iterN n f b = case n of
                  Z -> b
  		  S n' -> f (iterN n' f b)


add :: !(Nat -> Nat -> Nat)
add n m = -- iterN n S m
  case n of
    Z -> m
    S n' -> S (add n' m) 

minus :: ! (Nat -> Nat -> Nat)
minus n m = case n of
              Z -> Z
	      S n' -> case m of
	               Z -> n
	               S m' -> minus n' m'

mul :: ! (Nat -> Nat -> Nat)
mul n m = iterN n (\ x . add m x) Z

pred :: ! (Nat -> Nat)
pred n = case n of
            Z -> Z
            S m -> m
            
-- exp :: ! (Nat -> Nat -> Nat)
-- exp e n = iterN n (\ x . mul e x) (S Z)
         -- case n of
         --    Z -> m
	 --    S n' -> S (add n' m)


-- (<) :: ! (Nat -> Nat -> Bool)
-- (<) n m = case n of
--            Z -> case m of
--                   Z -> False
--                   S m' -> True
--            S n' -> case m of
--                      Z -> False
--                      S m' -> n' < m'


-- (+) :: ! (Nat -> Nat -> Nat)
-- (+) = add 

-- (-) :: ! (Nat -> Nat -> Nat)
-- (-) = minus 

-- (>=) :: !(Nat -> Nat -> Bool)
-- (>=) x y = not (x < y)

-- (>) :: !(Nat -> Nat -> Bool)
-- (>) x y = case x of
--             Z -> False
--             S x' -> case y of
--                      Z -> True
--                      S y' -> x' > y'

-- (<=) :: !(Nat -> Nat -> Bool)
-- (<=) x y =
--   case x of
--     Z -> True
--     S x' -> case y of
--                Z -> False
-- 	       S y' -> x' <= y'


{-
instance Num Nat where
  (+) = add
  (-) = minus
  (/) x y = 
     case x < y of
      True -> Z
      False -> let u = minus x y
                   res =  u / y
                in (S res)

  (@) = mul  
  (>) x y = case x of
              Z -> False
              S x' -> case y of
                        Z -> True
                        S y' -> x' > y'
  (<) n m = case n of
             Z -> case m of
                   Z -> False
                   S m' -> True
             S n' -> case m of
                      Z -> False
                      S m' -> n' < m'

  (>=) x y = not (x < y)
  (<=) x y =
    case x of
      Z -> True
      S x' -> case y of
               Z -> False
	       S y' -> x' <= y'
-}
-- div diverge when y == Z

-- div :: ! (Nat -> Nat -> Nat * Nat)
-- div x y =
--      case x < y of
--       True -> (Z, x)
--       False -> let u = minus x y
--                    (res, rem) = div u y
--                  in (S res, rem)    

-- mod :: ! (Nat -> Nat -> Nat)
-- mod x y = let (_, r) = div x y in r

-- log2helper :: ! (Nat -> Nat -> Nat)
-- log2helper n m =
--   case exp (S (S Z)) m >= n of
--    True -> m
--    False -> log2helper n (S m)

-- log2 :: ! (Nat -> Nat)
-- log2 n = log2helper n Z


-- minusM :: ! (Nat -> Nat -> Maybe Nat)
-- minusM n m =
--   case n < m of
--     True -> Nothing
--     False -> Just (n - m)


-- isOdd :: ! (Nat -> Bool)
-- isOdd n = let (_, rem) = div n (S (S Z)) 
--           in case rem of
--                 Z -> False
--                 S _ -> True

-- isEven :: ! (Nat -> Bool)
-- isEven n = not (isOdd n)


-- Some theorems about arithmetic

-- forceBool :: !(!Bool -> Bool)
-- forceBool x = x


addS :: ! (n m :: Nat) -> Eq Nat (add n (S m)) (S (add n m))
addS n m = 
           case n of
             Z -> refl 
             S n' -> cong S (addS n' m)


addS' :: ! (n m :: Nat) -> Eq Nat (S (add n m)) (add n (S m))
addS' n m =  sym (add n (S m)) (addS n m)
-- sym (add n (S m)) (addS n m)

addSS :: ! (n m :: Nat) -> Eq Nat (add n (S (S m))) (add (S (S n)) m) 
addSS n m = let p1 = addS n (S m)
                p2 = cong S (addS n m)
            in trans p1 p2

addSS' :: ! (n m :: Nat) -> Eq Nat (add (S (S n)) m) (add n (S (S m)))
addSS' n m = sym (add n (S (S m))) (addSS n m)

-- sym (add n (S (S m))) (addSS n m)


addOne :: ! (n :: Nat) -> Eq Nat (S n) (add n (S Z))
addOne n = case n of
              Z -> refl
              S n' -> cong S (addOne n')

addZ :: ! (n :: Nat) -> Eq Nat (add n Z) n
addZ n = case n of
           Z -> refl
           S n' -> cong S (addZ n')

addZ' :: ! (n :: Nat) -> Eq Nat n (add n Z)
addZ' n = sym (add n Z) (addZ n)
-- sym (add n Z) (addZ n)

symAdd :: ! (n m :: Nat) -> Eq Nat (add n m) (add m n)
symAdd n m =
  case n of
    Z -> sym (add m Z) (addZ m)
    -- (add m Z) (addZ m)
    S n' -> trans (cong S (symAdd n' m)) (addS' m n')


minusZ :: ! (n :: Nat) -> Eq Nat n (minus n Z)
minusZ n = case n of
             Z -> refl
	     S n' -> refl

boolBot :: ! (n m :: Nat) -> Eq Bool False True -> Eq Nat n m
boolBot n m pf =
  let E pf = pf in 
    E (\ p hy . pf (\ b . 
         case b of
           False -> p n
           True -> p m ) hy)
                               


eitherOr :: ! forall a . (x :: Bool) -> !(Eq Bool x True -> a) -> !(Eq Bool x False -> a) -> a
eitherOr x f1 f2 =
  case x of
    True -> f1 refl 
    False -> f2 refl




one :: Nat
one = S Z

two :: Nat
two = S one

three :: Nat
three = S two

four :: Nat
four = S three

five :: Nat
five = S four

six :: Nat
six = S five

seven :: Nat
seven = S six

eight :: Nat
eight = S seven

nine :: Nat
nine = S eight

smallNum :: Nat
smallNum = four


-- largeNum :: Nat
-- largeNum = iterN (add smallNum smallNum) (add smallNum) smallNum

{-
instance Equal Nat where
  (==) x y = case x of
               Z -> case y of
                      Z -> True
                      S _ -> False
               S x' -> case y of
                         Z -> False
                         S y' -> x' == y'

-}

-- testRefl :: Eq Nat (S Z) Z -- True False
-- testRefl = refl

-- testRefl2 :: Bool -> Nat -- True False
-- testRefl2 = id

-- testR :: Nat
-- testR = Bool


-- complement :: ! (m l :: Nat) -> Eq Bool (l <= m) True -> Eq Nat m (add l (minus m l))
-- complement m l pf = 
--   case l of
--     Z -> minusZ m
--     S l' -> case m of
--               Z -> boolBot Z (S (add l' (minus Z (S l')))) pf
--               S m' ->
--                 let res = complement m' l' pf in
--                  cong S res
	                            
-- complement' :: ! (m l :: Nat) -> Eq Bool (l <= m) True -> Eq Nat (add l (minus m l)) m
-- complement' m l pf = sym (complement m l pf)




-- psum :: forall (n :: Nat) . Eq Nat (add (S n) (sum n)) (sum (S n))
-- psum = refl
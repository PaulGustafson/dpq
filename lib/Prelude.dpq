module Prelude where
import "lib/Nat.dpq"
import "lib/Vec.dpq"
import "lib/Class.dpq"
import "lib/WithGarbage.dpq"
import "lib/List.dpq"
import "lib/State.dpq"

copyT :: !(Qubit -> Qubit * Qubit * Qubit)
copyT q =
   let (q1, q2) = copy q
       (q1, q3) = copy q1
   in (q1, q2, q3)


initVec :: ! (n :: Nat) -> Bool -> Vec Qubit n
initVec n b = case n of
                Z -> VNil 
		S n' -> VCons (initQubit b) (initVec n' b)

disB :: ! forall (n :: Nat) . Vec Bit n -> Unit
disB l = case l of
              VNil -> ()
	      VCons q qs ->
	        let _ = Discard q
		    _ = disB qs
		in ()

mapM :: ! forall a b (m :: Type -> Type) (n :: Nat) .
           (Monad m) => !(a -> m b) -> Vec a n -> m (Vec b n)
mapM f l =
  case l of
    VNil -> return VNil
    VCons x xs ->
      do x' <- f x
         xs' <- mapM f xs
	 return $ VCons x' xs'



revertSimpleFunction :: ! forall b . (a :: Type) -> (Simple a, Simple b) => !(a -> b) -> !(b -> a)
revertSimpleFunction a f x = unbox (revert $ box a f) x

switch :: ! forall a b c d . (a * b -> c * d) -> (b * a -> d * c)
switch f a = swap $ f (swap a)

boxCirc :: ! {a :: Type} -> forall (b :: Type) . (Simple a, Simple b) => !(a -> b) -> Circ(a, b)
boxCirc a f = box a f
module Prelude where
import "lib/Nat.dpq"
import "lib/Vec.dpq"
import "lib/Class.dpq"
import "lib/WithGarbage.dpq"
import "lib/List.dpq"

copyT :: !(Qubit -> Qubit * Qubit * Qubit)
copyT q =
   let (q1, q2) = copy q
       (q1, q3) = copy q1
   in (q1, q2, q3)


initVec :: ! (n :: Nat) -> Bool -> Vec Qubit n
initVec n b = case n of
                Z -> VNil 
		S n' -> VCons (initQubit b) (initVec n' b)

disB :: ! forall (n :: Nat) . Vec Bit n -> Unit
disB l = case l of
              VNil -> ()
	      VCons q qs ->
	        let _ = Discard q
		    _ = disB qs
		in ()


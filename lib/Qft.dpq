module Qft where
import "lib/Vec.dpq"
import "lib/Gates.dpq"

rotate :: ! forall (y :: Nat) . Qubit -> Nat -> Vec Qubit y -> Vec Qubit y * Qubit
rotate q buff qs = 
        case qs of
           VNil -> (VNil, q)
           VCons q' qs' -> 
             let (n, qs'') = length qs'
                 (r, c) = rotate q buff qs''
                 m = minus (S buff) n
                 (q'' , c') = R m q' c
   	     in (VCons q'' r , c')	       	    

qft_aux :: ! forall (n :: Nat) . Vec Qubit n -> Vec Qubit n
qft_aux l = case l of
                 VNil -> VNil 
                 VCons q qs ->
	           let (m, qs') = length qs
                       (qs'', q') = rotate q m (qft_aux qs') in
		   VCons (H q') qs''

-- big-headian QFT: the highest-order bit is at the head of the list.
qft :: !  (n :: Nat) -> Vec Qubit n -> Vec Qubit n
qft n l = reverse Qubit n (qft_aux l)
-- Qubit n

-- test1 :: Vec Qubit four
-- test1 = qft four (VCons (Init0 ()) (VCons (Init0 ()) (VCons (Init0 ()) (VCons (Init0 ()) VNil))))

qftTwice :: ! (n :: Nat) -> Vec Qubit n -> Vec Qubit n
qftTwice n l = qft n (qft n l)


qftBox :: ! (n :: Nat) -> Circ(Vec Qubit n, Vec Qubit n) 
qftBox n = box (Vec Qubit n) (\ x . qft n x)

-- qftBox_t1 = qftBox nine

-- qftBox_t2 = qftBox (nine + nine)

qftUnbox :: ! (n :: Nat) -> Vec Qubit n -> Vec Qubit n
qftUnbox n = unbox $ qftBox n

qft2Box :: ! (n :: Nat) -> Circ(Vec Qubit n, Vec Qubit n) 
qft2Box n = box (Vec Qubit n) $ \ x . qftUnbox n x

-- qft2Box_t1 = qft2Box (five + five)
 

qft4 :: Circ(Vec Qubit four, Vec Qubit four) 
qft4 = qftBox four


{-
-- little-headian QFT: the lowest-order bit is at the head of the list.
qft_little_headian :: ! (n :: Nat) -> Vec Qubit n -> Vec Qubit n
qft_little_headian n l = reverse Qubit n (qft_aux l)


qft_little_headian_Box :: ! (n :: Nat) -> Circ(Vec Qubit n, Vec Qubit n)
qft_little_headian_Box n = box (Vec Qubit n) $ \ x . qft_little_headian n x

-- qft_little_headian_Box_t1 = qft_little_headian_Box seven

qft_little_headian_rev :: ! (n :: Nat) -> Vec Qubit n -> Vec Qubit n
qft_little_headian_rev n =
  unbox $ revert $ qft_little_headian_Box n
  -- (box Vec Qubit n : qft_little_headian n)

qft_little_headian_rev_B :: ! (n :: Nat) -> Circ(Vec Qubit n, Vec Qubit n)
qft_little_headian_rev_B n = revert $ qft_little_headian_Box n

-- qft_little_headian_rev_B_t1 = qft_little_headian_rev_B eight

-- $ box Vec Qubit n :  qft_little_headian n

-- qft_little_headian_rev :: ! (n :: Nat) -> Vec Qubit n -> Vec Qubit n
-- qft_little_headian_rev n = unbox qft_little_headian_rev_B n

-- q2 :: Qubit
-- q2 = Init0

-- f :: ! (Bool -> Bool)
-- f x = let a = Term0 q2 in x



qft4_little :: Circ(Vec Qubit four, Vec Qubit four) 
qft4_little = qft_little_headian_Box four

qft4_little_rev :: Circ(Vec Qubit four, Vec Qubit four)
qft4_little_rev = revert qft4_little

qft_both :: ! (n :: Nat) -> Vec Qubit n -> Vec Qubit n
qft_both n l = qft_little_headian_rev n $ qft_little_headian n l

qft_both_Box :: ! (n :: Nat) -> Circ(Vec Qubit n, Vec Qubit n)
qft_both_Box n = box (Vec Qubit n) $ \ x . qft_both n x
-}
-- main = qft_both_Box nine 


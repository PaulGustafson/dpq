module ToVec where
-- import "lib2/Vec.dpq"
data Bool = True | False
object Qubit

data Nat = Z | S Nat

simple Vec a : Nat -> Type where
  Vec a Z = VNil
  Vec a (S n) = VCons a (Vec a n)

data List a = Nil | Cons a (List a)


simple Vec' a : List Unit -> Type where
   Vec' a Nil = VNil'
   Vec' a (Cons x xs) = VCons' a (Vec' a xs)
    


h1 : Vec' Nat (Cons () (Cons () Nil))
h1 = VCons' Z (VCons' Z VNil')
-- -- h1 x --

toNat : ! (List Unit -> Nat)
toNat x = case x of
            Nil -> Z
            Cons y qs -> S (toNat qs)

g' : ! (x : List Qubit) -> Vec Qubit (toNat x)
g' x = case x of
         Nil -> VNil
         Cons y zs -> VCons y (g' zs)


-- This is because the interaction of shape and polymorphism->
-- Nil @ Qubit is categorically equiv to Nil Unit, but this is
-- hard to enforce in the language-> So we would get the following
-- error: 
-- the program:
--   VNil'
-- is expected to have type:
--   Vec' Qubit (Nil @ Qubit)
-- but it has type:
--   Vec' a (Nil Unit)
-- g : ! (x : List Qubit) -> Vec' Qubit x
-- g x = 
--   case x of
--     Nil -> VNil'
--     Cons y ys -> VCons' y (g ys)
    -- goal: Vec' Q (Cons Unit y ys)
                    -- have Vec' a (Cons Unit x ys)
{-
g' : ! (x : List Qubit) -> Vec Qubit (toNat x)
g' x = case x of
         Nil -> VNil
         Cons y zs -> VCons y (g' zs)

h2 : Vec Nat (toNat (Cons () (Cons () Nil)))
h2 = [1, 2]
-}

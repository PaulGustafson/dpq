module Vec where
import "lib/Nat.dpq"
import "lib/Class.dpq"
import "lib/Theorems.dpq"


simple Vec a : Nat -> Type where
  Vec a Z = VNil
  Vec a (S n) = VCons a (Vec a n)


instance forall a (n : Nat) -> (QuantumOp a, Simple a) => QuantumOp (Vec a n) where
  unary g v =
    case v of
      VNil -> VNil
      VCons x xs ->
        let x' = unary g x
            xs' = unary g xs
        in VCons x' xs'

  copy l =
    case l of
      VNil -> (VNil, VNil)
      VCons x xs ->
        let (x1, x2) = copy x
	    (xs1, xs2) = copy xs
	in (VCons x1 xs1, VCons x2 xs2)    

  cnots l1 l2 =
    case l1 of
      VNil ->
       let VNil = l2 in (VNil, VNil)
      VCons x xs ->
        let VCons y ys = l2
	    (x1, y1) = cnots x y
	    (xs1, ys1) = cnots xs ys
	in (VCons x1 xs1, VCons y1 ys1)    



instance forall a (n : Nat) -> (Equal a, Parameter a) => Equal (Vec a n) where
  (==) l1 l2 =
    case l1 of
      VNil -> case l2 of
                 VNil -> True
      VCons x xs -> case l2 of
                      VCons y ys -> x == y && xs == ys
  

append : ! forall a (n m : Nat) -> Vec a n -> Vec a m -> Vec a (add n m)
append l1 l2 = case l1 of
                  VNil -> l2
    	          VCons x xs -> VCons x (append xs l2)

-- append' : ! forall a (m : Nat) -> (n : Nat) -> Vec a n -> Vec a m -> Vec a (add n m)
-- append' n l1 l2 = case l1 of
--                     VNil -> l2
--     	            VCons x xs ->
--                       let S n' = n in VCons x (append' n' xs l2)

append' : ! forall a (m : Nat) -> (n : Nat) -> Vec a n -> Vec a m -> Vec a (add n m)
append' n l1 l2 = case n of
                    Z -> let VNil = l1 in l2
                    S n' -> let VCons x xs = l1 in VCons x (append' n' xs l2)

-- append'' : ! forall a (m : Nat) -> (n : Nat) -> Vec a n -> Vec a m -> Vec a (add n m)
-- append'' n l1 l2 = case l1 of
--                     VNil -> l2
--                     VCons x xs ->
--                       case n of
--                          S n' -> VCons x (append'' n' xs l2)


infixl 11 ++

-- (++) : ! forall a (n m : Nat) -> Vec a n  -> Vec a m -> Vec a (add n m)
(++) = append 

reverse_aux : ! {a : Type} -> {n m : Nat} -> Vec a n -> Vec a m -> Vec a (add n m)
reverse_aux a n m l1 l2 =
  case n of
    Z -> case l1 of
           VNil -> l2
    S n' -> case l1 of
             VCons q qs -> 
    	       subst (\ x -> Vec a x) (addS n' m) $ reverse_aux qs (VCons q l2)
-- a n' (S m)
  -- case n of
  --   Z -> case l1 of
  --          VNil -> l2
  --   S n' -> let VCons q qs = l1
  --           in subst (\ x -> Vec a x) (addS n' m) $ reverse_aux a n' (S m) qs (VCons q l2)

-- reverse_aux' : ! (a : Type) -> (n m : Nat) -> Vec a n -> Vec a m -> Vec a (add n m)
-- reverse_aux' a n m l1 l2 =
--   case l1 of
--     VNil -> l2
--     VCons q qs -> let S n' = n
--                   in subst (\ x -> Vec a x) (addS n' m) $ reverse_aux' a n' (S m) qs (VCons q l2)    
  -- case n of
  --   Z -> case l1 of
  --          VNil -> l2
  --   S n' -> case l1 of
  --            VCons q qs -> 
  --   	       subst (\ x -> Vec a x) (addS n' m) $ reverse_aux a n' (S m) qs (VCons q l2)

reverse_vec : ! {a : Type} -> {n : Nat} -> Vec a n -> Vec a n
reverse_vec a n l = subst (\ x -> Vec a x) (addZ n) $ reverse_aux l VNil

zipWith : ! forall a b c (n : Nat) -> !(a -> b -> c) ->
              Vec a n -> Vec b n -> Vec c n
zipWith f l1 l2 =
    case l1 of
       VNil -> let VNil = l2 in VNil
       VCons q1 qs1 ->
	  let VCons q2 qs2 = l2 in
	   VCons (f q1 q2) (zipWith f qs1 qs2)

zip : ! forall a b (n : Nat) ->  Vec a n -> Vec b n -> Vec (a * b) n
zip l1 l2 =
  case l1 of
    VNil -> case l2 of
              VNil -> VNil
    VCons x xs -> case l2 of
                    VCons y ys ->
		      let u = (x, y) in
		      VCons u (zip xs ys)

unzip : ! forall a b (n : Nat) -> Vec (a * b) n -> Vec a n * Vec b n
unzip l = case l of
             VNil -> (VNil, VNil)
             VCons p qs ->
	                let (x , y) = p 
		            (l1, l2) = unzip qs in
		         (VCons x l1, VCons y l2)

map : ! forall a b (n : Nat) -> !(a -> b) -> Vec a n -> Vec b n
map f l =
  case l of
    VNil -> VNil
    VCons x xs -> VCons (f x) (map f xs)

length : ! forall a (n : Nat) -> Vec a n -> Nat * Vec a n
length l = case l of
             VNil -> (Z, VNil)
             VCons x xs -> let (n, xs') = length xs
                           in (S n, VCons x xs')


lengthP : ! forall a (n : Nat) -> (Parameter a) => Vec a n -> Nat
lengthP l = case l of
             VNil -> Z
             VCons x xs ->
	       let n = lengthP xs
               in S n

-- | need to make the normalizeUnif more clever
sf_vec_index : ! (a : Type) -> (n m : Nat) -> Vec a (S (add n m)) ->
                   Vec a n * a * Vec a m
sf_vec_index a n m as = 
  case as of
    VCons h t -> 
      case n of
        Z -> (VNil, h, t)
        S n' ->
         let (before, x, after) = sf_vec_index a n' m (subst (Vec a) (addS1 n' m) t) in
          (VCons h before, x, after)

sf_vec_unindex : ! (a : Type) -> (n m : Nat) ->
                  Vec a n -> a -> Vec a m -> Vec a (S (add n m)) 
sf_vec_unindex a n m before e after =
  subst (\ x -> Vec a x) (addS n m) $ before ++ (VCons e after)
         

-- an existential package for vector
data VecPac a = VP (n : Nat) (Vec a n)

pack : ! forall a (n : Nat) -> Vec a n -> VecPac a 
pack l = case l of
             VNil -> VP Z VNil
             VCons x xs -> let VP n xs' = pack xs
                           in VP (S n) (VCons x xs')

chop : ! forall a (n : Nat) -> Vec a (S n) -> a * Vec a n
chop l = let VCons x xs = l in (x, xs)

unPack : ! forall a -> VecPac a -> (n : Nat) * Vec a n 
unPack l = let VP n v = l in (n, v)

simple VecZipper a : Nat -> Nat -> Type where
  VecZipper a n m = VZ (Vec a n) a (Vec a m)

instance forall a (n m : Nat) -> (QuantumOp a, Simple a) => QuantumOp (VecZipper a n m) where
  unary g v =
    let VZ v1 v2 v3 = v in VZ (unary g v1) (unary g v2) (unary g v3)
  copy l =
    let VZ v1 v2 v3 = l
        (a1, a2) = copy v1
        (b1, b2) = copy v2
        (c1, c2) = copy v3
    in (VZ a1 b1 c1, VZ a2 b2 c2)

  cnots l1 l2 =
    let VZ a1 a2 a3 = l1
        VZ b1 b2 b3 = l2
        (a1', b1') = cnots a1 b1
        (a2', b2') = cnots a2 b2
        (a3', b3') = cnots a3 b3
     in (VZ a1' a2' a3', VZ b1' b2' b3')
        
forward : !forall a (n m : Nat) -> VecZipper a (S n) m -> VecZipper a n (S m)
forward v =
  let VZ l q r = v
      VCons x xs = l
  in VZ xs x (VCons q r)


go : ! (a : Type) -> (n m : Nat) -> (k : Nat) -> VecZipper a (add k n) m
         -> VecZipper a n (add k m)
go a n m k v =
  case k of
    Z -> v
    S k' -> subst (\ h -> VecZipper a n h) (addS k' m) $
      go a n (S m) k' $ forward v

-- Move focus from left to right k step
goForward : ! (a : Type) -> (n m k : Nat) -> (Eq Bool (k <= n) True) ->
               VecZipper a n m -> VecZipper a (minus n k) (add k m)
goForward a n m k pf v =
  go a (minus n k) m k $ subst (\ h -> VecZipper a h m) (complement n k pf) v

backward : !forall a (n m : Nat) -> VecZipper a n (S m) -> VecZipper a (S n) m
backward v = 
  let VZ l q r = v
      VCons x xs = r
  in VZ (VCons q l) x xs


back : ! (a : Type) -> (n m : Nat) -> (k : Nat) -> VecZipper a n (add k m)
         -> VecZipper a (add k n) m
back a n m k v =
  case k of
    Z -> v
    S k' -> subst (\ h -> VecZipper a h m) (addS k' n) $
      back a (S n) m k' $ backward v

goBackward : ! (a : Type) -> (n m k : Nat) -> (Eq Bool (k <= n) True) ->
               VecZipper a (minus n k) (add k m) -> VecZipper a n m
goBackward a n m k pf v =
   subst (\ h -> VecZipper a h m) (complement' n k pf) $
     back a (minus n k) m k v

-- dual of goBackward, in the sense of indexes
moveBackward : ! (a : Type) -> (n m k : Nat) -> (Eq Bool (k <= m) True) ->
               VecZipper a n m -> VecZipper a (add k n) (minus m k)
moveBackward a n m k pf v =
     back a n (minus m k) k $ subst (\ h -> VecZipper a n h) (complement m k pf) v

moveForward : ! (a : Type) -> (n m k : Nat) -> (Eq Bool (k <= m) True) ->
                 VecZipper a (add k n) (minus m k) -> VecZipper a n m
moveForward a n m k pf v =
   subst (\ h -> VecZipper a n h) (complement' m k pf) $
     go a n (minus m k) k v


depFold : ! forall b (n : Nat) -> (p : Nat -> Type) ->
             (! forall (n : Nat) -> b -> p n -> p (S n)) -> p Z -> Vec b n -> p n
depFold p f a l = 
  case l of
    VNil -> a
    VCons b bs ->
      f b (depFold p (\ x -> f x) a bs)


Coding standards (Adapted from Quipper)
================

All haskell source code should be equipped with Haddock-style
documentation comments (see http://www.haskell.org/haddock/doc/html/).

Character encoding
------------------

* The source code (except for comments) should use only ASCII.

* In comments, and particularly Haddock comments, UTF8 can be used.

Style guide for Haddock and documentation
-----------------------

The below style suggestions are not set in stone, and should be
ignored in situations where they do not make sense or where another
option is obviously better. However, in the interest of uniformity,
the style should be followed unless there is a good reason not to.

Currently most, but not all code, follows this style. When
encountering a piece of code that doesn't yet follow this style,
developers are encouraged to update it. Do not be shy about committing
such changes; it is perfectly okay to make a commit just to change one
word or character or punctuation. The commit comment then probably
should be something like "minor documentation update".

Spelling, punctuation, grammar:

* All Haddock documentation should use correct spelling and grammar.
  In the interest of uniformity, let's use American spelling
  throughout.

* The abbreviations "i.e." and "e.g." should be spelled with two
  periods, and should normally be preceded and succeeded by a comma,
  i.e., as in this sentence. Obviously, if the abbreviation is
  preceded by other punctuation (e.g., a parenthesis), then the
  corresponding comma is omitted.

* In the interest of uniformity, the word "boolean" should be spelled
  in lowercase anywhere "integer" would be spelled in lowercase.

* Except for section headers, all Haddock documentation should use
  complete sentences. All comments should start with an upper-case letter
  (unless it's a formula or code example), and end with punctuation.

* In text, a comma, period, exclamation mark, etc., should usually be
  followed by a space.

Markup style:

* Markup should be used as appropriate, for example 'name' or 'Name'
  for Haskell identifiers, "Name" for modules. One exception to this
  rule is section headers, which should not contain mark-up.

* Unicode can and should be used in Haddock comments. Unicode is
  preferable to ASCII art. Basic math notation, Greek letters, arrows,
  n-dashes and m-dashes, etc., can all be expressed in Unicode. For
  reference, here are some unicode symbols that we use frequently.

  × ⊕ ⊗ ÷ ⋅ ± ≠ ≤ ≥ ≅ ≈ ≡ ∈ ⊆ ⊊ ∪ ∩ ∞ • ° †
  ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁿ ⁻¹ ⁺ ⁻ ₀ ₁ ₂ ₃
  ‘ ’ “ ” … ĝ ï Û
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω
  Α Β Γ Δ Ε Ζ Η Θ Ι Κ Λ Μ Ν Ξ Ο Π Ρ Σ Τ Υ Φ Χ Ψ Ω
  minus: − ndash: – mdash: —
  → ← ↑ ↓ ↔ ↕ ↦ ◀ ▶ 〉〈 √ ‖ ⌊ ⌋ ⌈ ⌉ |0〉 |1〉
  ℚ ℝ ℕ ℤ ℂ ℍ ℙ ⅅ  ℬ ℰ ℯ ℱ ℊ ℋ ℎ ℐ ℒ ℓ ℳ ℴ ℘ ℛ

  For quotation marks, both the left-right style “” and the ASCII
  style "" can be used, but obviously they should be used in matching
  pairs. (Also keep in mind that "XYZ" has a special meaning in
  Haddock, so for ASCII-style quotation marks to show up literally,
  one must type \"XYZ\").

* In documentation, variable names (but not Greek letters, numbers,
  symbols, or operators such as mod and cos) should be made italic,
  following the usual conventions for mathematical typesetting. For
  example: (/x/, /a/) ↦ (/x/, /a/, /x/ mod 2/a/).

* For library modules: All Haddock documentation should be addressed
  to the *user* of the library, and not to its developer. Thus, it
  should describe what a particular module, class, or function does in
  a self-contained way that will allow a user to use the module,
  class, or function without looking at the code.

  Comments for developers, such as "I'm not sure why this works", or
  "note that we made it more efficient by using this clever trick",
  can of course be inserted as non-Haddock comments. Comments such as
  "I changed this" belong in the change log or email, not in the
  documentation.

* On the other hand, in the case of user-level code, the documentation
  should assist in *browsing and understanding the source
  code*. User-level programs are examples of how to program in
  Proto-Quipper-D, and not part of the implementation itself. This
  includes, for example, lib/Nat.dpq, and other various
  modules. Such code is not a library and we should
  document *all* their functionality.


* Every top-level declaration that will be processed by Haddock
  (module, class, type, function, etc) should be equipped with a
  Haddock-style documentation comment. If two functions do similar
  things, don't write "Here are two functions to do such-and-such".
  Write a comment for each function.

* Comments for top-level declarations that will not be exported by
  Haddock (e.g., local functions that are not exported by the module;
  methods in instance declarations) do not need to be written in
  Haddock style. However, it is encouraged to write them in Haddock
  style anyway, in case they are later exported; or in case somebody
  uses --ignore-exports.

* The comment style with -- is preferred over {- ... -}.

* Module and class declarations: the documentation should be in the
  form of a paragraph describing the module or class. They should
  start with a descriptive sentence that has a noun, for example:

  -- | This module provides...

  or

  -- | The "QData" module provides...

  but not just "Provides..." or "Provide...".

* Function declarations: the first sentence should be in the
  (nominally) imperative tense: thus, "Apply a controlled-not gate to
  a qubit." and not "Applies..." or "This function applies...".
  However, there are special cases:

  - If a function is very similar to another function already
    documented, but differs in one or more details, the preferred way
    to document such a function is to start with the word "Like". The
    "imperative" tense still applies. Example, for the 'bind_list'
    function:

    -- | Like 'bind', except bind a list of wires to a list of qubits.

    If the modification is just an adjective, the word "Like" does not
    seem appropriate. So instead of "Like 'qterm', except generic",
    it is better to write:

    -- | Generic version of 'qterm'.

  - When documenting a function, it is sometimes useful to give a
    usage example. Then it can be written in this style:

    -- | @'provideSimpleSubroutine' name circ@:
    -- If /name/ not already bound, bind it to /circ/.

    Please note the use of a colon. Also, the use of usage samples is
    not mandatory, and in many cases it adds nothing useful. It is
    particularly useful if a function has many parameters of similar
    types, to differentiate which parameter is which.

  Anything after the first sentence does not need to be in the
  imperative tense. For example:

  -- | Apply a function to every element in a list. If the list is
  -- empty, this function returns the empty list.

  When referring to the parameters of functions, it is generally
  preferred to use italics (the parameter /s/) rather than typewriter
  font (the parameter @s@). Also, the parameter should not be marked
  as a Haskell identifier, because it is not in the global scope
  (i.e., the parameter 's' will not work, or will link to the wrong
  thing). However, if the parameter is part of a larger code sample,
  write the whole code sample in @...@. For example: "In the call
  @myfunction a b c@, if /a/ is positive..."

* Section headers should start with an upper case letter, should *not*
  end with punctuation, and should not contain any markup such as
  'identifiers' or "modules". For example:

  -- * The QData class

  and not:

  -- * The 'QData' class

* When a module has an export list, the section headers go in the
  export list. Regardless, it is a good idea to repeat the section
  headers in the body of the module as well. This makes it easier to
  read the code, and also helps in case someone uses --ignore-exports.

* These guidelines may be revised or added to as the need arises.

Style guide for Haskell
-----------------------

Our Haskell style is still evolving. New code added should follow a
similar style as existing code. We do not currently have a preferred
idiom for whether to write "do" or "where" at the end of a line, or on
a line by itself, and so on. Just use common sense.

We may develop more specific guidelines in the future, as the need
arises. Similarly, when we encounter particular styles to avoid, they
will be added here.

* Indentation: the keywords "do" and "where" should be either followed
  or preceded by a line break (or both), i.e., they should not occur
  in the middle of a line of source code (except for comments, of
  course).

  Reason: the "do" or "where" may be shifted horizontally as the
  result of a "find and replace" operation or even spell-checking.
  This can lead to incorrect indentation, syntax errors, or in the
  worst case, changed program behavior.

  Example:
  let f x y = do command1
                 command2

  Renaming "f" as "fun" leads to:
  let fun x y = do command1
                 command2

  which is a syntax error.

* When writing tuples in code or in the documentation, it is generally
  preferable to use spaces after the commas, i.e., (a, b, c) rather
  than (a,b,c). 

* Language extensions should be declared at the beginning of the
  source file file, one per line, in the syntax:

  {-# LANGUAGE FlexibleInstances #-}

  Compiler options (other than the -X option) should be given after
  the LANGUAGE directives, one per line, using the syntax:

  {-# OPTIONS -fcontext-stack=50 #-}

  and preferably with a comment explaining why that option is used.

* We use camel case for naming identifiers.
  Identifiers start with a lower case letter and
  words are separated by capital letters rather than underscores.
  So, for example, one would use someMultiWordName rather than some_multi_word_name.

Style guide for Proto-Quipper-D
-----------------------

Proto-Quipper-D code should follow the "Proto-Quipper-D idiom" as much as possible.
The Proto-Quipper-D idiom is not yet very precisely defined, but there are
certain recurring patterns. The following are examples of the current
Proto-Quipper-D idiom.

Declarations:

  simpleCircuit :: !(Qubit -> Qubit -> Qubit * Qubit)
  simpleCircuit a b = 
    let x = <<gate1>>
        y = <<gate2>>
        z = <<gate3>>
    in (y, z)

  myGate :: !(Qubit -> WithGarbage Qubit)
  myGate x =
    do s <- <<action-1>>
       s2 <- <<action-2>>
       dispose s
       return s2
       
  idCirc :: ! (n :: Nat) -> Circ(Vec Qubit n, Vec Qubit n)
  idCirc n = box (Vec Qubit n) $ \ x . x


Statements and blocks:

  withControls <<controls>> $ do
      <<body>>

Git etiquette 
=============

The following are some tips and suggestions on how to use Git
better. These conventions will make it easier to keep track of the
status of branches and merges, and also to avoid erroneous commmits.

* Generally, try avoid committing broken stuff. Try to build and test
  the code before committing, and if possible, compare the output from
  before and after you made the change, to ensure you didn't break
  anything. If you are making a far-reaching change that requires many
  commits before it is stable, consider opening a temporary branch to
  work on your changes.

* When referring to previous revisions in log messages, please use the
  notation -2bc9fe67e45, or -2bc9fe67e45:d70b83fc8e to refer to a range of changes.
  For example: "undoing -2bc9fe67e45:d70b83fc8e" rather than "undoing a previous
  revision"; also: "fixing a mistake introduced in -d70b83fc8e". Similarly,
  "merging -2bc9fe67e45:2bc9fe67e45 from master into branch X". Also, "Creating a new
  branch from -2bc9fe67e45 of master". This makes it easier to reconstruct
  later what was copied, changed, or merged from where.

* Please avoid "commenting out" code. If you just rewrote some
  functions in such a way that the old ones are no longer needed, be
  brave and delete them, rather than leaving them as comments.
  Remember that the old version is in Git anyway, so if we need to
  restore it later, it will be easy enough to find (especially if you
  write a good log message, like "deleted the old version of xxx").
  Commented-out code is difficult to read in diff's.

* In general, it is best to commit multiple incremental (but
  self-contained) changesets, rather than waiting for a lot of changes
  to accumulate before you commit.

* When you make a change to shared code that could be controversial,
  it's best to discuss it first, perhaps by sending a patch and an
  explanation to all the maintainers. If you have made a non-trivial change to
  someone else's code, it's polite to let them know. Don't expect
  people to read all Git log messages. (However, trivial changes, such
  as fixing typos or improving documentation, should be made with
  confidence).

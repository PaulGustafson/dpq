module BWT where
import "test/Combinators.dpq"


-- ----------------------------------------------------------------------
-- * The diffusion step

-- Perform a single diffusion step of the quantum walk-> Here, a and b
-- are m-qubit registers holding node labels to be diffused-> r is a
-- control->
-- 
timestep : ! (m : Nat) ->
             Vec Qubit m -> Vec Qubit m -> Qubit -> Vec Qubit m * Vec Qubit m * Qubit
timestep m a b r =
  let state = with_ancilla False (\ h ->
       let (a,b) = map2 WGate a b 
           T h a b = toT $ map2_foldl ToffoliGate_10 h a b
           (h,r) = controlledExpGate h (r, False) 
           T h a b = toT $ map2_foldr ToffoliGate_10 h a b
           ab = map2r WGateInverse a b
       in ((ab, r), h) )
  in state
  



-- ----------------------------------------------------------------------
-- * The top-level algorithm

-- The main loop of the binary welded tree algorithm-> Because there is
-- currently no built-in real number type in Proto-Quipper, we leave
-- the timestep implicit-> Also, since Proto-Quipper currently does not
-- include classical bits or measurements, we return the unmeasured
-- quantum register a->
--

data Oracle (m : Nat) = O Nat -- n
                           Nat -- k
                           (Vec Bool m)
                           (!(Nat -> Vec Qubit m -> Vec Qubit m -> Qubit ->
                                Vec Qubit m * Vec Qubit m * Qubit))



qrwbwt : ! (Nat -> (m : Nat) -> Oracle m -> Vec Qubit m)
qrwbwt s m oracle =
      let O n k entrance oraclefun = oracle
          a = qinit_register entrance
          a = with_ancilla_reg (replicate m False) (\ b ->
          let (a,b) = with_ancilla False (\ r ->
              let T a b r = toT $ loop s ((a,b),r) ( \ rr ->
                     let T a b r = toT rr
                         T a b r = toT $
                                     for Z
                                      (minus k (S Z)) (S Z) ((a,b),r)
                                       ( \ c -> \ rr ->
                            let T a b r = toT rr
                                T a b r = toT $ oraclefun c a b r
                                T a b r = toT $ timestep m a b r 
                                T a b r = toT $ oraclefun c a b r
                             in ((a,b),r) )
                     in ((a,b),r) )
              in ((a,b),r)  )
           in (a,b) )
      in a 



-- ----------------------------------------------------------------------
-- * The oracle implementation

-- ----------------------------------------------------------------------
-- ** Oracle subroutines

-- The functions in this section implement a particular oracle for a
-- binary welded tree-> The oracle is parametric on:
--
-- * the tree depth n;
--
-- * two "welding vectors" f and g, specifying how the leaves of the
-- two binary trees are connected to each other-> Specifically, f and g
-- encode the permutations of leaves mapping a to (a xor f) and to
-- (a + g), respectively, where "xor" denotes bitwise exclusive or,
-- and "+" denotes binary addition->

-- Input a node label 'a' of length at least n+1-> Negate both 'root'
-- and 'even' if 'a' is a root node->
--

parseNodeRoot : !  (l n : Nat) -> Vec Qubit (S (add n l)) ->
                    Qubit -> Qubit ->  Vec Qubit (S (add n l)) * Qubit * Qubit
parseNodeRoot l n a root even = 
  let (a, re) = with_list_range Qubit l (S Z) n a (\ a ->
       let (re, a) = with_disjunction a (\ q ->
            let (root, q) = CNotGate False root q
                (even, q) = CNotGate False even q
            in ((root, even), q) )
           (root, even) = re
       in (a, (root, even)) )
      (root, even) = re
  in ((a, root) , even)



-- Input a node label 'a' of length at least n+1-> Negate 'even' if the
-- node 'a' occurs at an even height in the tree->
--

parseNodeEven : ! (l : Nat) -> (n : Nat) -> Vec Qubit (S (add n l)) -> Qubit ->
                    Vec Qubit (S (add n l)) * Qubit
parseNodeEven l n as even = 
  let as = number_elements as
      (as, even) = with_list_range (Qubit * Nat) l (S Z) n as (\ as ->
      let (as, even) = with_ancilla False (\ flag ->
        let (scratches, fle) = for_each_mapr as (flag, even) ( \ ai fe ->
                let (a, index) = ai
                    (flag, even) = fe
                    scratch = initQubit False
                    T scratch flag a = toT $ ToffoliGate False True scratch flag a
                    T even flag a = toT $
                                      toffoliGate_if (isEven index) even
                                        (flag, False) (a, True)
                    (flag, scratch) = CNotGate True flag scratch
                in (((a, index), scratch), (flag, even)) )
            (flag, even) = fle
            (as, flag) = for_each_map scratches flag ( \ r flag ->
             let T a index scratch = toT r
                 (flag, scratch) = CNotGate True flag scratch
                 T scratch flag a = toT $  ToffoliGate False True scratch flag a
                 unit = qterm False scratch
             in ((a, index), flag)  )
          in ((as, even), flag)  )
      in (as, even)   )
      as = unnumber_elements as
     in (as, even)


-- Input a node label 'a' of length at least 1, and flags 'root'
-- and 'even' describing whether 'a' is a root and at an even level,
-- respectively-> Negate 'isparent' if 'a' has a parent of color
-- 'color' in the tree->
--
-- The qubit 'ismatch' is an ancilla, and 'really' is either false or
-- true-> They are jointly used to control uncomputation, so that the
-- following sequence will compute and then uncompute 'testIsParent':
--
-- > ismatch <- qinit false;
-- > (a, root, even, isparent, ismatch) <- testIsParent (a, root, even, isparent, color, n, true, ismatch);
-- > (a, root, even, isparent, ismatch) <- testIsParent (a, root, even, isparent, color, n, false, ismatch);
-- > qterm false ismatch;
--

testIsParentHelper : ! (Bool * Bool -> Qubit -> Qubit -> Qubit -> Qubit ->
                          Quad Qubit Qubit Qubit Qubit)
testIsParentHelper color isparent ismatch even a0 =
  let (u, v) = color in
     case u of
       True -> case v of
                 True -> let T ismatch even a0 = toT $ ToffoliGate True True ismatch even a0
                         in Q ismatch isparent even a0
                 False -> let T isparent even a0 = toT $ ToffoliGate False True
                                                            isparent even a0
                          in Q ismatch isparent even a0
       False -> case v of
                 True -> let T ismatch even a0 = toT $ ToffoliGate True False ismatch even a0
                         in Q ismatch isparent even a0
                 False -> let T isparent even a0 = toT $ ToffoliGate False False
                                                            isparent even a0
                          in Q ismatch isparent even a0

testIsParent : ! forall (n : Nat) -> Vec Qubit (S n) -> Qubit -> Qubit -> Qubit ->
                 Bool * Bool -> Nat -> Bool ->
                 Qubit ->  Five (Vec Qubit (S n)) Qubit Qubit Qubit Qubit
testIsParent a root even isparent color n really ismatch =
  let (a0, as) = sf_head a
      T isparent root ismatch = toT $ toffoliGate_if (not really)
                                          isparent (root, False) (ismatch, True)
      Q ismatch isparent even a0 = testIsParentHelper color isparent ismatch even a0            
      T isparent root ismatch = toT $ ToffoliGate False True isparent root ismatch
      a = VCons a0 as
  in F a root even isparent ismatch



-- Consider a node 'a', and negate 'ischild' if 'a' has a child node
-- of color 'color'-> Also set 'direction' to indicate whether it is a
-- "left" or "right" child-> Here, 'color' is a boolean register of
-- length 2, representing a color-> This function is self-inverse->
--
testIsChild : ! (Qubit -> Qubit -> Qubit -> Bool * Bool -> Nat -> Qubit * Qubit * Qubit)
testIsChild even ischild direction color n =
 let (a, b) = color 
     (ischild, even) = CNotGate (not b) ischild even
     direction = qnot_if a direction
 in ((even, ischild), direction)



-- Input a node label 'a' of length at least n+2, and a flag
-- 'isparent' that has been initialized accordingly-> Also input a
-- register 'b' of length at least n+2, initialized to 0->  If
-- 'isparent' is set, set 'b' to the node label of the parent of
-- 'a'-> This is self-inverse->

-- there are some type conversions when using a and b due to dependent types 
setParent : ! (n l : Nat) -> Vec Qubit (S (S (add n l))) -> 
                Vec Qubit (S (S (add n l))) -> Qubit -> 
                Triple (Vec Qubit (S (S (add n l)))) (Vec Qubit (S (S (add n l)))) Qubit
setParent n l a b isparent = 
  let (a, bis) = with_list_range Qubit (S l) (S Z) n (subst (\ x -> Vec Qubit x) (ha1 n l) a) (\ as ->
       let (b, asis) = with_list_range Qubit (S (S l)) Z n (subst (\ x -> Vec Qubit x) (addZ2 n l) b) (\ bs ->
        let T as bs isparent = for_each_map2 as bs isparent ( \ a b isparent ->
          let T b isparent a = toT $ ToffoliGate True True b isparent a
          in T a b isparent  )
        in (bs, (as, isparent)) )
           (as, isparent) = asis
       in (as, (b, isparent))  )
      (b, isparent) = bis -- subst (\ x -> Vec Qubit x) (addS (S n) l) $
      (a, bis) = with_list_index Qubit (S n) l (subst (\ x -> Vec Qubit x) (addS (S n) l) $ a) (\ a ->
          let (b, ais) = with_list_index Qubit (S n) l (subst (\ x -> Vec Qubit x) (addSS n l) $ b) (\ b ->
                let T b isparent a = toT $ ToffoliGate True True b isparent a
                in (b, (a, isparent))   )
              (a, isparent) = ais
          in (a, (b, isparent)) )
      (b, isparent) = bis
  in T a b isparent


-- Input a node label 'a', and a register 'b' initialized to 0-> If
-- 'weldctrl' is set, set 'b' to the node connected to 'a' by the
-- welding function 'g'-> This is self-inverse-> Here, 'a' and 'b' are
-- quantum registers of length at least n+2, and 'g' is a boolean
-- register of length n->

doWeld0 : ! (n l : Nat) ->
              Vec Qubit (S (S (add n l))) ->
              Vec Qubit (S (S (add n l))) -> Qubit ->
	      Vec Bool n ->
              Triple (Vec Qubit (S (S (add n l))))
	              (Vec Qubit (S (S (add n l)))) Qubit
doWeld0 n l a b weldctrl f =
  let T abefore as aafter = toT $ sf_list_range Qubit (S (S l)) Z (n) (subst (\ x -> Vec Qubit x) (addZ2 n l) a)
      T bbefore bs bafter = toT $ sf_list_range Qubit (S (S l)) Z (n) (subst (\ x -> Vec Qubit x) (addZ2 n l) b)
      T fbefore fs fafter = toT $ sf_list_range Bool Z Z (n) (subst (\ x -> Vec Bool x) (addZZ' n) f)
      Q as bs fs weldctrl = for_each_map3 as bs fs weldctrl ( \ ai bi fi weldctrl ->
        let T bi weldctrl ai = toT $ ToffoliGate True (not fi) bi weldctrl ai 
        in Q ai bi fi weldctrl)
      a = subst (\ x -> Vec Qubit x) (addSS n l) $ abefore ++ as ++ aafter
      b = subst (\ x -> Vec Qubit x) (addSS n l) $ bbefore ++ bs ++ bafter
  in T a b weldctrl


-- majority q (a, b, n): negate q iff the majority of a, b, and n is 1->
-- Here, a and b are qubits, and n is a boolean->
--
majority : ! (Qubit -> Qubit -> Qubit -> Bool -> Triple Qubit Qubit Qubit)
majority q a b n =
  case n of
    True ->
      let (q, a) = CNotGate True q a
          T q a b = toT $ ToffoliGate True True q a b
          (q, b) = CNotGate True q b
      in T q a b
    False ->
      let T q a b = toT $ ToffoliGate True True q a b
      in T q a b


-- This function implements integer addition with carry-> Input a
-- quantum register 'input', a boolean register 'num', representing
-- integers, a quantum register 'output' initialized to 0, and a qubit
-- 'carry'-> If 'control' is set, set 'output' to 'input' + 'num' +
-- 'carry', otherwise do nothing-> The registers 'input' and 'carry'
-- are unmodified, and the function is self-inverse-> The register
-- 'input', 'output', and 'num' must all have equal length-> The
-- integers are represented in little-headian order, i->e->, the head of
-- the list holds the least significant bit->
--
cAddNum_carry : ! forall (n : Nat) ->
                Qubit -> Vec Qubit n -> Vec Qubit n -> Vec Bool n -> Qubit ->
                Quad Qubit (Vec Qubit n) (Vec Qubit n) Qubit 
cAddNum_carry control output input num carry =
  case output of
    VNil -> case input of VNil -> case num of VNil -> Q control VNil VNil carry
    VCons o os ->
     case input of
       VCons i is ->
         case num of
           VCons n ns ->
            let T o i control = toT $ ToffoliGate True True o i control
                (o, control) = cnotGate_if n o control True
                T o carry control = toT $ ToffoliGate True True o carry control
                F control os is carry i = with_ancilla False (\ carry' ->
                      let T carry' i carry = majority carry' i carry n
                          Q control os is carry' = cAddNum_carry control os is ns carry'
                          T carry' carry i = majority carry' carry i n
                      in (F control os is carry i, carry') )
            in Q control (VCons o os) (VCons i is) carry
         


-- This function implements integer addition-> Input a quantum register
-- 'input' and a boolean register 'num', representing integers, and a
-- quantum register 'output' initialized to 0-> If 'control' is set, set
-- 'output' to 'input' + 'num', otherwise do nothing->  Here 'input',
-- 'output', and 'num' are registers of length at least n->
--
-- Our implementation deviates from the GFI-specified one, because in
-- a functional language, it is more natural to implement addition
-- recursively-> However, we did this in such a way that the resulting
-- sequence of gates is still the "orthodox" one->
--
cAddNumHelper : ! forall (n : Nat) -> Vec Qubit n -> Vec Qubit n -> Vec Bool n -> Qubit ->
                   Triple Qubit (Vec Qubit n) (Vec Qubit n)
cAddNumHelper output input num control = 
  case output of
    VNil -> case input of VNil -> case num of VNil -> T control VNil VNil
    VCons o os ->
      case input of
        VCons i is ->
          case num of
            VCons n ns ->
              let T o i control = toT $ ToffoliGate True True o i control
                  (o, control) = cnotGate_if n o control True
                  Q control os is i = with_ancilla False (\ carry ->
                      let (carry, i) = cnotGate_if n carry i True
                          Q control os is carry = cAddNum_carry control os is ns carry
                          (carry, i) = cnotGate_if n carry i True
  	              in (Q control os is i, carry) )
              in T control (VCons o os) (VCons i is)
             

cAddNum : ! (l m n : Nat)  -> Qubit -> Vec Qubit (add n l) -> Vec Qubit (add n m) ->
	    Vec Bool n -> 
            Triple Qubit (Vec Qubit (add n l)) (Vec Qubit (add n m))
cAddNum l m n control output input num =
  let (output, orest) = list_split Qubit n l output
      (input, irest) = list_split Qubit n m input
      (num, nrest) = list_split Bool n 0 (subst (\ x -> Vec Bool x) (addZ' n) num)
      T control output input = cAddNumHelper output input num control
      output = output ++ orest 
      input = input ++ irest
  in T control output input


-- | Like 'cAddNum', except subtract instead of adding->
-- 
-- Rather than following the GFI implementation, we take advantage of
-- the fact that subtracing is the same thing as adding the two's
-- complement-> The generated sequence of gates is slightly different,
-- but nevertheless correct->
-- 
cSubNum : ! (l m : Nat) ->
	    (n : Nat) -> Qubit -> Vec Qubit (add n l) -> Vec Qubit (add n m) ->
	    Vec Bool n -> 
            Triple Qubit (Vec Qubit (add n l)) (Vec Qubit (add n m))

cSubNum l m n control output input num =
  let num' = twos_complement num in
  cAddNum l m n control output input num'


-- Input a node label 'a', and a register 'b' initialized to 0-> If
-- 'weldctrl' is set, set 'b' to the node connected to 'a' by the
-- welding function 'f'-> This is self-inverse-> Here, 'a' and 'b' are
-- quantum registers of length at least n+2, and 'f' is a boolean
-- register of length n->
--

doWeld1 : ! (n l : Nat) -> Vec Qubit (S (S (add n l))) ->
             Vec Qubit (S (S (add n l))) -> Qubit -> Vec Bool n -> 
             Triple (Vec Qubit (S (S (add n l))))
                (Vec Qubit (S (S (add n l)))) Qubit
doWeld1 n l a b weldctrl g =
  let T a b weldctrl = with_ancilla False (\ addsub ->
       let T as an1 aafter = sf_list_index Qubit (S n) l (a)
           T addsub weldctrl an1 = toT $ ToffoliGate True False addsub weldctrl an1
           T addsub b as = cAddNum (S (S l)) 1 n addsub (subst (\ x -> Vec Qubit x) (addSS' n l) b)
                             (subst (\ x -> Vec Qubit x) (addOne n) as) g
           (addsub, weldctrl) = CNotGate True addsub weldctrl
           T addsub b as = cSubNum (S (S l)) 1 n addsub b as g
           T addsub weldctrl an1 = toT $ ToffoliGate True True addsub weldctrl an1
           a = subst (\ x -> Vec Qubit x) (addSZ n l) $ as ++ VCons an1 aafter
	   b = subst (\ x -> Vec Qubit x) (addSS n l) b
        in (T a b weldctrl, addsub) )
  in T a b weldctrl


-- A special case of 'setChild', where the child is in the opposite
-- binary tree, i->e->, we follow one of the welding edges->
--

setWeld : ! (n l : Nat) -> Vec Qubit (S (S (add n l))) -> Vec Qubit (S (S (add n l))) ->
             Qubit -> Qubit -> Vec Bool n -> Vec Bool n -> 
           Quad (Vec Qubit (S (S (add n l)))) (Vec Qubit (S (S (add n l)))) Qubit Qubit
setWeld n l a b childctrl direction f g =
  let Q a b childctrl direction = with_ancilla False (\ weldctrl ->
        let T weldctrl childctrl direction = toT $ ToffoliGate True False
                                                       weldctrl childctrl direction
            T a b weldctrl = doWeld0 n l a b weldctrl f 
            (weldctrl, childctrl) = CNotGate True weldctrl childctrl
            T a b weldctrl = doWeld1 n l a b weldctrl g 
            T weldctrl childctrl direction = toT $ ToffoliGate True True
                                                     weldctrl childctrl direction
            T abefore an1 aafter = sf_list_index Qubit (S n) l a
            T bbefore bnn bafter = toT $ sf_list_range Qubit l n (S (S Z)) (subst (\ x -> Vec Qubit x) (addSSZ n l) b)
            VCons bn bs = bnn
            VCons bn1 m = bs
            VNil = m
            T bn1 childctrl an1 = toT $ ToffoliGate True True bn1 childctrl an1
            (bn, childctrl) = CNotGate True bn childctrl
            (bn1, childctrl) = CNotGate True bn1 childctrl
            b = subst (\ x -> Vec Qubit x) (addSSZ' n l) $ bbefore ++ VCons bn (VCons bn1 VNil) ++ bafter
            a = subst (\ x -> Vec Qubit (S x)) (addS n l) $ abefore ++ VCons an1 aafter
        in (Q a b childctrl direction, weldctrl) )
  in Q a b childctrl direction


-- A special case of 'setChild', where the child is inside the same
-- binary tree (i->e->, not via the welding)->
--
setChildInTree : ! (n l : Nat) -> Vec Qubit (S (S (add n l))) -> Vec Qubit (S (S (add n l))) ->
                  Qubit -> Qubit -> 
                  Quad (Vec Qubit (S (S (add n l)))) (Vec Qubit (S (S (add n l)))) Qubit Qubit
setChildInTree n l a b childctrl direction  = 
  let T bbefore b0 bafter = sf_list_index Qubit Z (S (add n l)) b
      T b0 childctrl direction = toT $ ToffoliGate True True b0 childctrl direction
      b = bbefore ++ VCons b0 bafter 
      T abefore as aafter = toT $ sf_list_range Qubit (S (S l)) Z n (subst (\ x -> Vec Qubit x) (addZ2 n l) a)
      T bbefore bs bafter = 
        toT $ sf_list_range Qubit (S l) 1 n (subst (\ x -> Vec Qubit x) (minor' n l) b)
      T as bs childctrl = for_each_map2 as bs childctrl ( \ a b childctrl ->
            let T b childctrl a = toT $ ToffoliGate True True b childctrl a
            in T a b childctrl )
      b = bbefore ++ bs ++ bafter
      a = abefore ++ as ++ aafter
      T abefore an1 aafter = sf_list_index Qubit (S n) l (subst (\ x -> Vec Qubit x) (addSS n l) a)
      T bbefore bn1 bafter = sf_list_index Qubit (S n) l (subst (\ x -> Vec Qubit (S x)) (addS n l) b)
      --  subst (\ x -> Vec Qubit x) (ha4 n l)
      T bn1 childctrl an1 = toT $ ToffoliGate True True bn1 childctrl an1
      a = subst (\ x -> Vec Qubit (S x)) (addS n l) $ abefore ++ VCons an1 aafter
      b = subst (\ x -> Vec Qubit (S x)) (addS n l) $ bbefore ++ VCons bn1 bafter
  in Q a b childctrl direction


-- Similar to 'setParent', but set 'b' to the node label of the
-- indicated child of 'a'-> Here 'a' and 'b' are quantum registers of
-- length at least n+2, and 'f' and 'g' are boolean registers of
-- length n->
--
setChild : ! (n l : Nat) -> Vec Qubit (S (S (add n l))) -> Vec Qubit (S (S (add n l))) ->
             Qubit -> Qubit -> Vec Bool n -> Vec Bool n -> 
              Quad (Vec Qubit (S (S (add n l)))) (Vec Qubit (S (S (add n l)))) Qubit Qubit
setChild n l a b ischild direction f g =
  let Q a b ischild direction = with_ancilla False (\ childctrl->
     let (a, r) = with_list_index Qubit n (S l) (subst (\ x -> Vec Qubit (S x)) (addS' n l) a) (\ an ->
          let T childctrl ischild an = toT $ ToffoliGate True True childctrl ischild an
          in (an, (childctrl, ischild)) )
         (childctrl, ischild) = r
         Q a b childctrl direction = setWeld n l (subst (\ x -> Vec Qubit (S x)) (addS n l) a)
	                               b childctrl direction f g 
         (childctrl, ischild) = CNotGate True childctrl ischild
         Q a b childctrl direction = setChildInTree n l a b childctrl direction 
         (a, r) = with_list_index Qubit n (S l) (subst (\ x -> Vec Qubit (S x)) (addS' n l) a) (\ an ->
               let T childctrl ischild an = toT $ ToffoliGate True False childctrl ischild an
               in (an, (childctrl, ischild)) )
         (childctrl, ischild) = r
	 a = subst (\ x -> Vec Qubit (S x)) (addS n l) a
     in (Q a b ischild direction, childctrl) )
  in Q a b ischild direction


----------------------------------------------------------------------
-- ** The main oracle function

-- The main oracle function->
--

oraclefun : ! (n l : Nat) -> Vec Bool n -> Vec Bool n ->
             Nat -> Vec Qubit (S (S (add n l))) -> Vec Qubit (S (S (add n l))) -> Qubit ->
             Vec Qubit (S (S (add n l))) * Vec Qubit (S (S (add n l))) * Qubit
oraclefun n l f g c a b r =
  let color = getTwo $ boolreg_of_int_le (S (S Z)) c 
      T a b r = with_ancilla_reg (replicate 6 False) (\ rr ->
    let ST ismatch direction ischild isparent even root = getSix rr
        T a root even = toT $ parseNodeRoot (S l) n (subst (\ x -> Vec Qubit (S x)) (addS' n l) a) root even 
        (a, even) = parseNodeEven (S l) n a even 
        F a root even isparent ismatch = testIsParent a root even isparent color n True ismatch
        T even ischild direction = toT $ testIsChild even ischild direction color n
        T a b isparent = setParent n l (subst (\ x -> Vec Qubit (S x)) (addS n l) a) b isparent 
        Q a b ischild direction = setChild n l a b ischild direction f g 
        T r isparent ischild = toT $ ToffoliGate False False r isparent ischild
        T even ischild direction = toT $ testIsChild even ischild direction color n
        F a root even isparent ismatch = testIsParent a root even isparent color n False
                                           ismatch
        (a, even) = parseNodeEven (S l) n (subst (\ x -> Vec Qubit (S x)) (addS' n l) a) even 
        T a root even = toT $ parseNodeRoot (S l) n a root even 
    in (T a b r,
         VCons root $ VCons even $ VCons isparent $
            VCons ischild $ VCons direction $ VCons ismatch VNil) )
  in ((subst (\ x -> Vec Qubit (S x)) (addS n l) a,b),r)


  


-- ----------------------------------------------------------------------
-- * The main program

-- Display the circuit for tree depth n, repetition count s=1, and
-- some arbitrary choice of welding vectors f and g->
--

fun : ! (Nat -> (n : Nat) -> Vec Bool n -> Vec Bool n ->
                 Vec Qubit (S (S n)) ->
                     Vec Qubit (S (S n)) ->
                       Qubit -> Vec Qubit (S (S n)) * Vec Qubit (S (S n)) * Qubit)
fun x n f g = 
         subst (\ x -> Nat -> Vec Qubit (S (S x)) -> Vec Qubit (S (S x))
                  -> Qubit -> Vec Qubit (S (S x)) * Vec Qubit (S (S x)) * Qubit) (addZ n)
                   (oraclefun n Z f g) x

orthodoxy : ! (s : Nat) -> (n : Nat) -> Vec Bool n -> Vec Bool n -> Vec Qubit (S (S n))
orthodoxy s n f g =
  let entrance = boolreg_of_int_le (S (S n)) 1
      k = 4
      v = S (S n)
      oracle = O n k entrance (\ x -> fun x n f g)
  in qrwbwt s v oracle
  -- qrwbwt s n m k entrance fun
-- qrwbwt : ! (Nat -> (m : Nat) -> Oracle m -> Vec Qubit m)

main : Circ(Unit, Vec Qubit 6)
main = -- box Unit $ \ u -> orthodoxy 1 4 (VCons True $ VCons False $ VCons True $ VCons False VNil) (VCons False $ VCons True $ VCons False $ VCons True VNil)
   let f = VCons True $ VCons False $ VCons True $ VCons False VNil
       g = VCons False $ VCons True $ VCons False $ VCons True VNil
       s = 1
       n = 4
   in box Unit (\ u -> orthodoxy s n f g)


module BWT2 where
import "lib/Prelude.dpq"
import "test/Combinators2.dpq"

data Oracle =
  ORACLE
    Nat -- n
    Nat -- m
    Nat -- k
    (List Bool) -- entrance
    (!(Nat -> List Qubit -> List Qubit -> Qubit -> List Qubit * List Qubit * Qubit)) -- oraclefun

data Timestep = TIMESTEP

-- ----------------------------------------------------------------------
-- * The diffusion step

-- Perform a single diffusion step of the quantum walk-> Here, a and b
-- are m-qubit registers holding node labels to be diffused-> r is a
-- control->
-- 
timestep : ! (List Qubit -> List Qubit -> Qubit -> Nat -> List Qubit * List Qubit * Qubit)
timestep a b r m =
  let state = with_ancilla False (\ h ->
       let (a,b) = map2 WGate a b 
           T h a b = toT $ map2_foldl ToffoliGate_10 h a b
           (h,r) = controlledExpGate h (r, False) 
           T h a b = toT $ map2_foldr ToffoliGate_10 h a b
           (a,b) = map2r WGateInverse a b
       in (((a,b),r),h) )
  in state
  



-- ----------------------------------------------------------------------
-- * The top-level algorithm

-- The main loop of the binary welded tree algorithm-> Because there is
-- currently no built-in real number type in Proto-Quipper, we leave
-- the timestep implicit-> Also, since Proto-Quipper currently does not
-- include classical bits or measurements, we return the unmeasured
-- quantum register a->
--
qrwbwt : ! (Oracle -> Nat -> List Qubit)
qrwbwt oracle s =
  case oracle of
    ORACLE n m k entrance oraclefun ->
      let a = qinit_register entrance
          a = with_ancilla_reg (replicate m False) (\ b ->
          let (a,b) = with_ancilla False (\ r ->
              let T a b r = toT $ loop s ((a,b),r) ( \ rr ->
                     let T a b r = toT rr
                         T a b r = toT $
                                     for Z
                                      (minus k (S Z)) (S Z) ((a,b),r)
                                       ( \ c -> \ rr ->
                            let T a b r = toT rr
                                T a b r = toT $ oraclefun c a b r
                                T a b r = toT $ timestep a b r m
                                T a b r = toT $ oraclefun c a b r
                             in ((a,b),r) )
                     in ((a,b),r) )
              in ((a,b),r)  )
           in (a,b) )
      in a



-- ----------------------------------------------------------------------
-- * The oracle implementation

-- ----------------------------------------------------------------------
-- ** Oracle subroutines

-- The functions in this section implement a particular oracle for a
-- binary welded tree-> The oracle is parametric on:
--
-- * the tree depth n;
--
-- * two "welding vectors" f and g, specifying how the leaves of the
-- two binary trees are connected to each other-> Specifically, f and g
-- encode the permutations of leaves mapping a to (a xor f) and to
-- (a + g), respectively, where "xor" denotes bitwise exclusive or,
-- and "+" denotes binary addition->

-- Input a node label 'a' of length at least n+1-> Negate both 'root'
-- and 'even' if 'a' is a root node->
--

parseNodeRoot : ! (List Qubit -> Qubit -> Qubit -> Nat -> List Qubit * Qubit * Qubit)
parseNodeRoot a root even n =
  let (a, re) = with_list_range (S Z) n a (\ a ->
       let (re, a) = with_disjunction a (\ q ->
            let (root, q) = CNotGate False root q
                (even, q) = CNotGate False even q
            in ((root, even), q) )
           (root, even) = re
       in (a, (root, even)) )
      (root, even) = re
  in ((a, root) , even)


-- Input a node label 'a' of length at least n+1-> Negate 'even' if the
-- node 'a' occurs at an even height in the tree->
--

parseNodeEven : ! (List Qubit -> Qubit -> Nat -> List Qubit * Qubit)
parseNodeEven as even n =
  let as = number_elements as
      (as, even) = with_list_range (S Z) n as (\ as ->
      let (as, even) = with_ancilla False (\ flag ->
        let (scratches, fle) = for_each_mapr as (flag, even) ( \ ai fe ->
                let (a, index) = ai
                    (flag, even) = fe
                    scratch = initQubit False
                    T scratch flag a = toT $ ToffoliGate False True scratch flag a
                    T even flag a = toT $
                                      toffoliGate_if (isEven index) even
                                        (flag, False) (a, True)
                    (flag, scratch) = CNotGate True flag scratch
                in (((a, index), scratch), (flag, even)) )
            (flag, even) = fle
            (as, flag) = for_each_map scratches flag ( \ r flag ->
             let T a index scratch = toT r
                 (flag, scratch) = CNotGate True flag scratch
                 T scratch flag a = toT $  ToffoliGate False True scratch flag a
                 unit = qterm False scratch
             in ((a, index), flag)  )
          in ((as, even), flag)  )
      in (as, even)   )
      as = unnumber_elements as
     in (as, even)


-- Input a node label 'a' of length at least 1, and flags 'root'
-- and 'even' describing whether 'a' is a root and at an even level,
-- respectively-> Negate 'isparent' if 'a' has a parent of color
-- 'color' in the tree->
--
-- The qubit 'ismatch' is an ancilla, and 'really' is either false or
-- true-> They are jointly used to control uncomputation, so that the
-- following sequence will compute and then uncompute 'testIsParent':
--
-- > ismatch <- qinit false;
-- > (a, root, even, isparent, ismatch) <- testIsParent (a, root, even, isparent, color, n, true, ismatch);
-- > (a, root, even, isparent, ismatch) <- testIsParent (a, root, even, isparent, color, n, false, ismatch);
-- > qterm false ismatch;
--

testIsParentHelper : ! (Bool * Bool -> Qubit -> Qubit -> Qubit -> Qubit ->
                        Quad Qubit Qubit Qubit Qubit)
testIsParentHelper color isparent ismatch even a0 =
  let (u, v) = color in
     case u of
       True -> case v of
                 True -> let T ismatch even a0 = toT $ ToffoliGate True True ismatch even a0
                         in Q ismatch isparent even a0
                 False -> let T isparent even a0 = toT $ ToffoliGate False True
                                                            isparent even a0
                          in Q ismatch isparent even a0
       False -> case v of
                 True -> let T ismatch even a0 = toT $ ToffoliGate True False ismatch even a0
                         in Q ismatch isparent even a0
                 False -> let T isparent even a0 = toT $ ToffoliGate False False
                                                            isparent even a0
                          in Q ismatch isparent even a0

testIsParent : ! (List Qubit -> Qubit -> Qubit -> Qubit -> Bool * Bool -> Nat -> Bool -> Qubit ->  Five (List Qubit) Qubit Qubit Qubit Qubit)
testIsParent a root even isparent color n really ismatch =
  let (a0, as) = sf_head a
      T isparent root ismatch = toT $ toffoliGate_if (not really)
                                          isparent (root, False) (ismatch, True)
      Q ismatch isparent even a0 = testIsParentHelper color isparent ismatch even a0            
      T isparent root ismatch = toT $ ToffoliGate False True isparent root ismatch
      a = Cons a0 as
  in F a root even isparent ismatch



-- Consider a node 'a', and negate 'ischild' if 'a' has a child node
-- of color 'color'-> Also set 'direction' to indicate whether it is a
-- "left" or "right" child-> Here, 'color' is a boolean register of
-- length 2, representing a color-> This function is self-inverse->
--
testIsChild : ! (Qubit -> Qubit -> Qubit -> Bool * Bool -> Nat -> Qubit * Qubit * Qubit)
testIsChild even ischild direction color n =
 let (a, b) = color 
     (ischild, even) = CNotGate (not b) ischild even
     direction = qnot_if a direction
 in ((even, ischild), direction)



-- Input a node label 'a' of length at least n+2, and a flag
-- 'isparent' that has been initialized accordingly-> Also input a
-- register 'b' of length at least n+2, initialized to 0->  If
-- 'isparent' is set, set 'b' to the node label of the parent of
-- 'a'-> This is self-inverse->
--
setParent : ! (List Qubit -> List Qubit -> Qubit -> Nat -> Triple (List Qubit) (List Qubit) Qubit)
setParent a b isparent n =
  let (a, bis) = with_list_range (S Z) n a (\ as ->
       let (b, asis) = with_list_range Z (n - (S Z)) b (\ bs ->
        let T as bs isparent = for_each_map2 as bs isparent ( \ a b isparent ->
          let T b isparent a = toT $ ToffoliGate True True b isparent a
          in T a b isparent  )
        in (bs, (as, isparent)) )
           (as, isparent) = asis
       in (as, (b, isparent))  )
      (b, isparent) = bis
      (a, bis) = with_list_index (S n) a (\ a ->
          let (b, ais) = with_list_index (S n) b (\ b ->
                let T b isparent a = toT $ ToffoliGate True True b isparent a
                in (b, (a, isparent))   )
              (a, isparent) = ais
          in (a, (b, isparent)) )
      (b, isparent) = bis
  in T a b isparent


-- Input a node label 'a', and a register 'b' initialized to 0-> If
-- 'weldctrl' is set, set 'b' to the node connected to 'a' by the
-- welding function 'g'-> This is self-inverse-> Here, 'a' and 'b' are
-- quantum registers of length at least n+2, and 'g' is a boolean
-- register of length n->
--
doWeld0 : ! (List Qubit -> List Qubit -> Qubit -> List Bool -> Nat ->
      Triple (List Qubit) (List Qubit) Qubit)
doWeld0 a b weldctrl f n =
  let T abefore as aafter = toT $ sf_list_range Z (n - 1) a
      T bbefore bs bafter = toT $ sf_list_range Z (n - 1) b
      T fbefore fs fafter = toT $ sf_list_range Z (n - 1) f
      Q as bs fs weldctrl = for_each_map3 as bs fs weldctrl ( \ ai bi fi weldctrl ->
        let T bi weldctrl ai = toT $ ToffoliGate True (not fi) bi weldctrl ai 
        in Q ai bi fi weldctrl)
      a = appendL (appendL abefore  as) aafter
      b = appendL (appendL bbefore bs) bafter
      f = (appendL (appendL fbefore fs) fafter)
  in T a b weldctrl


-- majority q (a, b, n): negate q iff the majority of a, b, and n is 1->
-- Here, a and b are qubits, and n is a boolean->
--
majority : ! (Qubit -> Qubit -> Qubit -> Bool -> Triple Qubit Qubit Qubit)
majority q a b n =
  case n of
    True ->
      let (q, a) = CNotGate True q a
          T q a b = toT $ ToffoliGate True True q a b
          (q, b) = CNotGate True q b
      in T q a b
    False ->
      let T q a b = toT $ ToffoliGate True True q a b
      in T q a b


-- This function implements integer addition with carry-> Input a
-- quantum register 'input', a boolean register 'num', representing
-- integers, a quantum register 'output' initialized to 0, and a qubit
-- 'carry'-> If 'control' is set, set 'output' to 'input' + 'num' +
-- 'carry', otherwise do nothing-> The registers 'input' and 'carry'
-- are unmodified, and the function is self-inverse-> The register
-- 'input', 'output', and 'num' must all have equal length-> The
-- integers are represented in little-headian order, i->e->, the head of
-- the list holds the least significant bit->
--
cAddNum_carry : ! (Qubit -> List Qubit -> List Qubit -> List Bool -> Qubit ->
    Quad Qubit (List Qubit) (List Qubit) Qubit)
cAddNum_carry control output input num carry =
  case output of
    Nil -> case input of Nil -> case num of Nil -> Q control Nil Nil carry
    Cons o os ->
     case input of
       Cons i is ->
         case num of
           Cons n ns ->
            let T o i control = toT $ ToffoliGate True True o i control
                (o, control) = cnotGate_if n o control True
                T o carry control = toT $ ToffoliGate True True o carry control
                F control os is carry i = with_ancilla False (\ carry' ->
                      let T carry' i carry = majority carry' i carry n
                          Q control os is carry' = cAddNum_carry control os is ns carry'
                          T carry' carry i = majority carry' carry i n
                      in (F control os is carry i, carry') )
            in Q control (Cons o os) (Cons i is) carry
         


-- This function implements integer addition-> Input a quantum register
-- 'input' and a boolean register 'num', representing integers, and a
-- quantum register 'output' initialized to 0-> If 'control' is set, set
-- 'output' to 'input' + 'num', otherwise do nothing->  Here 'input',
-- 'output', and 'num' are registers of length at least n->
--
-- Our implementation deviates from the GFI-specified 1, because in
-- a functional language, it is more natural to implement addition
-- recursively-> However, we did this in such a way that the resulting
-- sequence of gates is still the "orthodox" 1->
--
cAddNumHelper : ! (List Qubit -> List Qubit -> List Bool -> Qubit ->
                   Triple Qubit (List Qubit) (List Qubit))
cAddNumHelper output input num control = 
  case output of
    Nil -> case input of Nil -> case num of Nil -> T control Nil Nil
    Cons o os ->
      case input of
        Cons i is ->
          case num of
            Cons n ns ->
              let T o i control = toT $ ToffoliGate True True o i control
                  (o, control) = cnotGate_if n o control True
                  Q control os is i = with_ancilla False (\ carry ->
                      let (carry, i) = cnotGate_if n carry i True
                          Q control os is carry = cAddNum_carry control os is ns carry
                          (carry, i) = cnotGate_if n carry i True
  	              in (Q control os is i, carry) )
              in T control (Cons o os) (Cons i is)
             

cAddNum : ! (Qubit -> List Qubit -> List Qubit -> List Bool -> Nat ->
            Triple Qubit (List Qubit) (List Qubit))
cAddNum control output input num n =
  let (output, orest) = list_split n output
      (input, irest) = list_split n input
      (num, nrest) = list_split n num
      T control output input = cAddNumHelper output input num control
      output = appendL output orest
      input = appendL input irest
  in T control output input


-- | Like 'cAddNum', except subtract instead of adding->
-- 
-- Rather than following the GFI implementation, we take advantage of
-- the fact that subtracing is the same thing as adding the two's
-- complement-> The generated sequence of gates is slightly different,
-- but nevertheless correct->
-- 
cSubNum : ! (Qubit -> List Qubit -> List Qubit -> List Bool -> Nat ->
              Triple Qubit (List Qubit) (List Qubit))
cSubNum control output input num n =
  let num' = twos_complement num in
  cAddNum control output input num' n


-- Input a node label 'a', and a register 'b' initialized to 0-> If
-- 'weldctrl' is set, set 'b' to the node connected to 'a' by the
-- welding function 'f'-> This is self-inverse-> Here, 'a' and 'b' are
-- quantum registers of length at least n+2, and 'f' is a boolean
-- register of length n->
-- 
doWeld1 : ! (List Qubit -> List Qubit -> Qubit -> List Bool -> Nat ->
             Triple (List Qubit) (List Qubit) Qubit)
doWeld1 a b weldctrl g n =
  let 
      T a b weldctrl = with_ancilla False (\ addsub ->
       let T as an1 aafter = sf_list_index (S n) a
           T addsub weldctrl an1 = toT $ ToffoliGate True False addsub weldctrl an1
           T addsub b as = cAddNum addsub b as g n
           (addsub, weldctrl) = CNotGate True addsub weldctrl
           T addsub b as = cSubNum addsub b as g n
           T addsub weldctrl an1 = toT $ ToffoliGate True True addsub weldctrl an1
           a = appendL as $ Cons an1 aafter
        in (T a b weldctrl, addsub) )
  in T a b weldctrl


-- A special case of 'setChild', where the child is in the opposite
-- binary tree, i->e->, we follow 1 of the welding edges->
--

setWeld : ! (List Qubit -> List Qubit -> Qubit -> Qubit -> List Bool -> List Bool -> Nat ->
           Quad (List Qubit) (List Qubit) Qubit Qubit)
setWeld a b childctrl direction f g n =
  let Q a b childctrl direction = with_ancilla False (\ weldctrl ->
        let T weldctrl childctrl direction = toT $ ToffoliGate True False
                                                       weldctrl childctrl direction
            T a b weldctrl = doWeld0 a b weldctrl f n
            (weldctrl, childctrl) = CNotGate True weldctrl childctrl
            T a b weldctrl = doWeld1 a b weldctrl g n
            T weldctrl childctrl direction = toT $ ToffoliGate True True
                                                     weldctrl childctrl direction
            T abefore an1 aafter = sf_list_index (S n) a
            T bbefore bnn bafter = toT $ sf_list_range n (S n) b
            Cons bn bs = bnn
            Cons bn1 m = bs
            Nil = m
            T bn1 childctrl an1 = toT $ ToffoliGate True True bn1 childctrl an1
            (bn, childctrl) = CNotGate True bn childctrl
            (bn1, childctrl) = CNotGate True bn1 childctrl
            b = appendL (appendL bbefore $ Cons bn (Cons bn1 Nil)) bafter
            a = appendL abefore $ Cons an1 aafter
        in (Q a b childctrl direction, weldctrl) )
  in Q a b childctrl direction


-- A special case of 'setChild', where the child is inside the same
-- binary tree (i->e->, not via the welding)->
--
setChildInTree : ! (List Qubit -> List Qubit -> Qubit -> Qubit -> Nat ->
                  Quad (List Qubit) (List Qubit) Qubit Qubit)
setChildInTree a b childctrl direction n =
  let T bbefore b0 bafter = sf_list_index Z b
      T b0 childctrl direction = toT $ ToffoliGate True True b0 childctrl direction
      b = appendL bbefore $ Cons b0 bafter
      T abefore as aafter = toT $ sf_list_range Z (n - 1) a
      T bbefore bs bafter = toT $ sf_list_range 1 n b
      T as bs childctrl = for_each_map2 as bs childctrl ( \ a b childctrl ->
            let T b childctrl a = toT $ ToffoliGate True True b childctrl a
            in T a b childctrl )
      b = appendL (appendL bbefore bs) bafter
      a = appendL (appendL abefore as) aafter
      T abefore an1 aafter = sf_list_index (S n) a
      T bbefore bn1 bafter = sf_list_index (S n) b
      T bn1 childctrl an1 = toT $ ToffoliGate True True bn1 childctrl an1
      a = appendL abefore $ Cons an1 aafter
      b = appendL bbefore $ Cons bn1 bafter
  in Q a b childctrl direction


-- Similar to 'setParent', but set 'b' to the node label of the
-- indicated child of 'a'-> Here 'a' and 'b' are quantum registers of
-- length at least n+2, and 'f' and 'g' are boolean registers of
-- length n->
--
setChild : ! (List Qubit -> List Qubit -> Qubit -> Qubit -> List Bool -> List Bool -> Nat ->
              Quad (List Qubit) (List Qubit) Qubit Qubit)
setChild a b ischild direction f g n =
  let Q a b ischild direction = with_ancilla False (\ childctrl->
     let (a, r) = with_list_index n a (\ an ->
          let T childctrl ischild an = toT $ ToffoliGate True True childctrl ischild an
          in (an, (childctrl, ischild)) )
         (childctrl, ischild) = r
         Q a b childctrl direction = setWeld a b childctrl direction f g n
         (childctrl, ischild) = CNotGate True childctrl ischild
         Q a b childctrl direction = setChildInTree a b childctrl direction n
         (a, r) = with_list_index n a (\ an ->
               let T childctrl ischild an = toT $ ToffoliGate True False childctrl ischild an
               in (an, (childctrl, ischild)) )
         (childctrl, ischild) = r
     in (Q a b ischild direction, childctrl) )
  in Q a b ischild direction


----------------------------------------------------------------------
-- ** The main oracle function

-- The main oracle function->
--

oraclefun : ! (Nat -> List Bool -> List Bool -> Nat -> List Qubit -> List Qubit -> Qubit ->
             List Qubit * List Qubit * Qubit)
oraclefun n f g c a b r =
  let color = getTwo $ boolreg_of_int_le (S 1) c 
      T a b r = with_ancilla_reg (replicate 6 False) (\ rr ->
    let ST ismatch direction ischild isparent even root = getSix rr
        T a root even = toT $ parseNodeRoot a root even n
        (a, even) = parseNodeEven a even n
        F a root even isparent ismatch = testIsParent a root even isparent color n True ismatch
        T even ischild direction = toT $ testIsChild even ischild direction color n
        T a b isparent = setParent a b isparent n
        Q a b ischild direction = setChild a b ischild direction f g n
        T r isparent ischild = toT $ ToffoliGate False False r isparent ischild
        T even ischild direction = toT $ testIsChild even ischild direction color n
        F a root even isparent ismatch = testIsParent a root even isparent color n False
                                           ismatch
        (a, even) = parseNodeEven a even n
        T a root even = toT $ parseNodeRoot a root even n
    in (T a b r,
         Cons root $ Cons even $ Cons isparent $
            Cons ischild $ Cons direction $ Cons ismatch Nil) )
  in ((a,b),r)


-- The orthodox oracle-> The parameter n is the tree depth->
--

orthodox_oracle : ! (Nat -> List Bool -> List Bool -> Oracle)
orthodox_oracle n f g =
  let m = S (S n) 
      k = 4
      entrance = boolreg_of_int_le (S (S n)) 1
  in ORACLE n m k entrance (\ x -> oraclefun n f g x)
  


-- ----------------------------------------------------------------------
-- * The main program

-- Display the circuit for tree depth n, repetition count s=1, and
-- some arbitrary choice of welding vectors f and g->
--
comp : ! (Unit -> List Qubit)
comp u = qrwbwt (orthodox_oracle 2 (Cons True $ Cons False Nil) (Cons False $ Cons True Nil)) 1

main'' : Circ(Unit, Vec Qubit 4)
main'' =
  box Unit $ \ u ->
   let  -- $ Cons True $ Cons False Nil
       f = Cons True $ Cons False Nil
       g = Cons False $ Cons True Nil -- $ Cons False $ Cons True Nil
       s = 1
       n = 2
       vs = unsafe_to_vec 4 $ qrwbwt (orthodox_oracle n f g) s
   in vs

-- main =
--   box Unit $ \ u ->
--    let  -- $ Cons True $ Cons False Nil
--        f = Cons True $ Cons False Nil
--        g = Cons False $ Cons True Nil -- $ Cons False $ Cons True Nil
--        s = 1
--        n = 2
--        vs = listToVec (qrwbwt (orthodox_oracle n f g) s)
--    in vs

main =
  box Unit (
    \ u -> listToVec (qrwbwt
                       (orthodox_oracle 2 (Cons True (Cons False Nil))
                         (Cons False (Cons True Nil))) 1))

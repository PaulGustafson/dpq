module Combinators2 where
import "lib/Prelude.dpq"



simple Triple a b c :: Type where
  Triple a b c = T a b c


toT :: ! forall a b c -> (a * b) * c -> Triple a b c
toT x = let (a, b, c) = x 
        in T a b c

simple Quad a b c d :: Type where
  Quad a b c d = Q a b c d

simple Six a b c d e f :: Type where
  Six a b c d e f = ST a b c d e f


with_ancilla :: ! forall a -> Bool -> (Qubit -> a * Qubit) -> a
with_ancilla b body =
  case b of
    True ->
      let ancilla = Init1 () in
      let (output, ancilla) = body ancilla in
      let unit = Term1 ancilla in
      output
    False ->
      let ancilla = Init0 () in
      let (output, ancilla) = body ancilla in
      let unit = Term0 ancilla in
      output

map2 :: ! forall a b c d -> !(a -> b -> c * d) -> List a -> List b -> List c * List d
map2 f xs ys =
  case xs of
    Nil ->
      case ys of
        Nil -> (Nil, Nil)
    Cons x xs ->
      case ys of
        Cons y ys ->
          let (x',y') = f x y in
          let (xs',ys') = map2 f xs ys in
          (Cons x' xs', Cons y' ys')

map2_foldl :: ! forall s a b c d -> !(s -> a -> b -> s * c * d) ->
                s -> List a -> List b -> s * List c * List d   
map2_foldl f ss as bs =
  case as of
    Nil -> case bs of
            Nil -> ((ss, Nil), Nil)
    Cons a as ->
      case bs of
        Cons b bs ->
	  let (sc, d) = f ss a b
	      (s1, c) = sc
	      (scs, ds) = map2_foldl f s1 as bs
	      (s2, cs) = scs
	  in  ((s2, Cons c cs), Cons d ds) 

map2_foldr :: ! forall s a b c d -> !(s -> a -> b -> s * c * d) -> s ->
                 List a -> List b -> s * List c * List d
map2_foldr f s as bs = 
   case as of
     Nil ->
       case bs of
         Nil -> ((s, Nil), Nil)
     Cons a as ->
       case bs of
         Cons b bs ->
	   let (scs, ds) = map2_foldr f s as bs
	       (s1, cs) = scs
	       (s2c, d) = f s1 a b
	       (s2, c) = s2c
	    in ((s2, Cons c cs) , Cons d ds)

map2r :: ! forall a b c d -> !(a -> b -> c * d) -> List a -> List b -> List c * List d
map2r f as bs =
  case as of
    Nil -> case bs of
               Nil -> (Nil, Nil)
    Cons a as ->
      case bs of
        Cons b bs ->
	  let (cs, ds) = map2r f as bs
	      (c, d) = f a b
	  in (Cons c cs, Cons d ds)

mapr :: ! forall a b -> !(a -> b) -> List a -> List b 
mapr f l = case l of
                  Nil -> Nil 
                  Cons q qs -> Cons (f q) (mapr f qs)

zipList :: ! forall a b ->  List a -> List b -> List (a * b)
zipList l1 l2 =
  case l1 of
    Nil -> case l2 of
            Nil -> Nil
    Cons x xs -> case l2 of
                  Cons y ys -> Cons (x, y) (zipList xs ys)
    

loop :: ! forall a -> Nat -> a -> !(a -> a) -> a
loop n x f =
  case n of
    Z -> x
    S n' -> f (loop n' x f)

qinit_register :: ! (List Bool -> List Qubit)
qinit_register x = mapr initQubit x

			  
qterm_register :: ! (List Bool -> List Qubit -> List Unit)
qterm_register bs qs = 
  mapr ( \ x -> let (b,q) = x in qterm b q) (zipList bs qs)

with_ancilla_reg :: ! forall a -> List Bool -> (List Qubit -> a * List Qubit) -> a
with_ancilla_reg bs body =
  let
      qs = qinit_register bs
      (res,qs) = body qs
      x = qterm_register bs qs
  in res

replicate :: ! (Nat -> Bool -> List Bool)
replicate n x = case n of
                   Z -> Nil
                   S n' -> Cons x (replicate n' x)


for :: ! forall x -> Nat -> Nat -> Nat -> x -> !(Nat -> x -> x) -> x
for a b s x f = 
  case ((s >= Z) && (a > b)) || ((s <= Z) && (a < b)) of
    True -> x
    False -> let x = f a x in
              for (a + s) b s x f  -- has bug in the type checker


list_split :: ! forall a -> Nat -> List a -> List a * List a
list_split n xs =
  case n of
    Z -> (Nil, xs)
    S n' -> 
      case xs of
       Nil -> (Nil, Nil)
       Cons h t -> 
         let (as, bs) = list_split n' t in
           (Cons h as, bs)


sf_list_range :: ! forall a -> Nat -> Nat -> List a -> List a * List a * List a
sf_list_range n m xs =
  let (as, after) = list_split (S m) xs in
  let (before, range) = list_split n as in
  ((before, range), after)


with_list_range :: ! forall a t -> Nat -> Nat -> List a -> (List a -> (List a * t)) -> (List a * t)
with_list_range n m as body =
 let T before as after = toT $ sf_list_range n m as
     (as, s) = body as
     as = appendL (appendL before as) after
  in (as, s)


with_disjunction_aux :: ! forall a -> List Qubit -> (Qubit -> a * List Qubit * Qubit) ->
                          Triple a (List Qubit) (List Qubit)
with_disjunction_aux qs body =
    case qs of
      Nil -> 
        let (a, as) = with_ancilla False body
        in T a as Nil
      Cons h t ->
        let T a has t = with_disjunction_aux t (\ p ->
           let T a has p = with_ancilla False (\ q ->
  	    let T q p h = toT $ ToffoliGate False True q p h
                (q, p) = CNotGate True q p
                T a as q = toT $ body q
                (q, p) = CNotGate True q p
      	        T q p h = toT $ ToffoliGate False True q p h
            in (T a (Cons h as) p, q) )
           in ((a, has), p) )
            Cons h as = has
        in T a as (Cons h t)
              

with_disjunction :: ! forall a -> List Qubit -> (Qubit -> a * Qubit) -> a * List Qubit
with_disjunction qs body = 
  let T a n qs = with_disjunction_aux qs (\ q ->
    let (a, q) = body q
    in ((a, Nil), q))
      Nil = n
  in (a, qs)

map_foldr :: ! forall s a b -> !(s -> a -> s * b) -> s -> List a -> s * List b
map_foldr f s l =
  case l of
    Nil -> (s, Nil)
    Cons x xs -> 
      let (s1, as) = map_foldr f s xs in
      let (s2, a) = f s1 x in
      (s2, Cons a as)

for_each_mapr :: ! forall s a b -> List a -> s -> !(a -> s -> b * s) -> List b * s
for_each_mapr xs s body = 
  let (s, ys) = map_foldr ( \ s a -> let (x, y) = body a s in (y, x)) s xs in
  (ys, s)


toffoliGate_if :: ! (Bool -> Qubit -> Qubit * Bool -> Qubit * Bool -> Qubit * Qubit * Qubit)
toffoliGate_if cond x ys zt =
 let (y,s) = ys
     (z, t) = zt
 in   
  case cond of
    True -> ToffoliGate s t x y z
    False -> ((x, y), z)

map_foldl :: ! forall a b s -> !(s -> a -> s * b) -> s -> List a -> s * List b
map_foldl f s l =
  case l of
    Nil -> (s, Nil)
    Cons x xs -> 
      let (s1, a) = f s x in
      let (s2, as) = map_foldl f s1 xs in
      (s2, Cons a as)

number_elements :: ! forall a -> List a -> List (a * Nat)
number_elements l =
  let (x, y) = map_foldl ( \ n x -> (S n, (x,n))) Z l
  in y

for_each_map :: ! forall a b s -> List a -> s -> !(a -> s -> b * s) -> (List b) * s
for_each_map xs s body = 
  let (s, ys) = map_foldl ( \ s a -> swap (body a s)) s xs in
  (ys, s)

fst' :: ! forall a -> (a * Nat) -> a
fst' x = let (a, b) = x in a

unnumber_elements :: ! forall a -> List (a * Nat) -> List a
unnumber_elements l = mapr ( \ a -> fst' a) l

sf_head :: ! forall a -> List a -> a * List a
sf_head l = case l of
               Cons x xs -> (x, xs)

qnot_if :: ! (Bool -> Qubit -> Qubit)
qnot_if cond q = 
  case cond of
    True -> QNot q
    False -> q

sf_list_index :: ! forall a -> Nat -> List a -> Triple (List a) a (List a)
sf_list_index n as =
  case as of
    Cons h t -> 
      case n <= Z of
        True -> T Nil h t
        False ->
         let T before a after = sf_list_index (n - S Z) t in
         T (Cons h before) a after


with_list_index :: ! forall a t -> Nat -> List a -> (a -> a * t) -> List a * t
with_list_index n as body =
  let T before a after = sf_list_index n as
      (a, s) = body a
      as = appendL before $ Cons a after
  in (as, s)

for_each_map2 :: ! forall a b c d s -> List a -> List b -> s -> !(a -> b -> s -> Triple c d s) ->
                     Triple (List c)  (List d) s
for_each_map2 xs ys s body =
  case xs of
    Nil -> case ys of
             Nil -> T Nil Nil s
    Cons x xs ->
      case ys of
        Cons y ys ->
          let T a b s1 = body x y s
              T as bs s2 = for_each_map2 xs ys s1 body
          in T (Cons a as) (Cons b bs) s2


for_each_map3 :: ! forall a b c d e f s -> List a -> List b -> List c -> s ->
                      !(a -> b -> c -> s -> Quad d e f s) -> Quad (List d) (List e) (List f) s
for_each_map3 xs ys zs s body =
  case xs of
    Nil -> case ys of
            Nil -> case zs of
                     Nil -> Q Nil Nil Nil s
    Cons x xs -> case ys of
                  Cons y ys -> case zs of
                                Cons z zs ->
                                 let Q a b c s1 = body x y z s
                                     Q as bs cs s2 = for_each_map3 xs ys zs s1 body
                                 in Q (Cons a as) (Cons b bs) (Cons c cs) s2

cnotGate_if :: ! (Bool -> Qubit -> Qubit -> Bool -> Qubit * Qubit)
cnotGate_if cond x y s =
  case cond of
    True -> CNotGate s x y
    False -> (x, y)
    
twos_complement :: ! (List Bool -> List Bool)
twos_complement xs =
  case xs of
    Nil -> Nil
    Cons f t ->
      case f of
        False -> Cons False $ twos_complement t
        True -> Cons True $ mapr not t

getTwo :: ! forall a -> List a -> a * a
getTwo l = let Cons h1 hs = l
               Cons h2 hs = hs
               Nil = hs
             in (h1, h2)
             
getSix :: ! forall a -> List a -> Six a a a a a a
getSix l = let Cons h1 hs = l
               Cons h2 hs = hs
               Cons h3 hs = hs
               Cons h4 hs = hs
               Cons h5 hs = hs
               Cons h6 hs = hs
               Nil = hs
             in ST h1 h2 h3 h4 h5 h6


boolreg_of_int_le :: ! (Nat -> Nat -> List Bool)
boolreg_of_int_le m x =
  case m <= Z of
    True -> Nil
    False -> let y = isOdd x
                 r = divMod x 2
                 (res, rem) = r
             in Cons y $ boolreg_of_int_le (m - 1) res

simple Five a b c d e :: Type where
  Five a b c d e = F a b c d e


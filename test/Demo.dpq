module Demo where
import "lib/Prelude.dpq"

-- some random annotation test
-- f = withType ! forall a-> a -> a : \ x -> x

-- g = let f = withType ! forall a-> a -> a : \ x -> x in f (f 5)

-- g1 = let f = \ (x : Nat) -> x in (f 5)

-- -- g2 = let f = \ (x y z : Nat) -> x in (f 5)
-- g3 = let f = (\ a -> \ x -> x) : (a : Type) -> a -> a in (f Nat 5)
-- g4 = let f = \(a b : Type) -> \(x : a) -> x in (f Nat Nat 5) 

reverseGeneric : ! forall b -> {a : Type} -> (Simple a, Simple b) => !(a -> b) -> !(b -> a)
reverseGeneric a f = unbox (reverse (box a f))

---- x----------------
---- |-----x----------
---- |-----|-----x----
---- Not---Not---Not--
ands : ! forall (n : Nat)-> Vec Qubit n -> Qubit -> Vec Qubit n * Qubit
ands v a = case v of
             VNil -> (VNil, a)
             VCons x xs ->
                let (xs', a') = ands xs a
	            (a'', x') = CNot a' x
         	 in (VCons x' xs', a'')

test1 = box (Vec Qubit 3 * Qubit) (uncurry ands)

ands' (n : Nat) (v : Vec Qubit n) = let a = Init0 () in ands v a

ands'' (n : Nat) = reverseGeneric (\ x -> ands' n x)

test2 = boxCirc (\ x -> ands' 3 x)

test3 = boxCirc (\ x -> ands'' 3 x)


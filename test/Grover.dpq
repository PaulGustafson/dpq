module Grover where
import "lib/Prelude.dpq"



toffoli :: ! (Qubit -> Qubit -> Qubit -> Qubit * Qubit * Qubit)
toffoli x y z = ToffoliGate True True x y z


controlled CZ :: Qubit -> Qubit

-- There are some reshuffling using reverse to make the order match up with
-- Mermin's book. But the core part is the mapM.
cascade :: ! (n :: Nat) -> Vec Qubit n -> Qubit -> Vec Qubit n ->
                Vec Qubit n * Vec Qubit n * Qubit
cascade n a c b =
  let a1 = reverse a
      r = zip a1 b 
      (r1, c') = runState c $ 
        mapM (\ x . let (a, b) = x in
               applyS $ \ s .
                    let (a', s', b') = toffoli a s b
                    in ((s', b'), a')
          ) r
      (a', b') = unzip r1
  in (a', b', c')

box_cascade :: ! (n :: Nat) -> Circ(Vec Qubit n * Qubit * Vec Qubit n,
                                  Vec Qubit n * Vec Qubit n * Qubit)
box_cascade n = box (Vec Qubit n * Qubit * Vec Qubit n) $
                 \ x . (uncurry $ uncurry (\ y . cascade n y)) x

testCas1 :: Circ(Vec Qubit 4 * Qubit * Vec Qubit 4,
                                  Vec Qubit 4 * Vec Qubit 4 * Qubit)
testCas1 = box_cascade 4


nfoldZ :: ! (n :: Nat) -> Vec Qubit n -> Qubit -> Vec Qubit n -> Qubit -> Qubit ->
              Qubit * Qubit * Vec Qubit n * Qubit * Vec Qubit n
nfoldZ n a c b d1 d2 =
  let (a', b', c') = cascade n a c b
      (d1', r) = CZ d1 (d2, c')
      (d2', c'') = r
      cascade' = unbox $ revert $ box_cascade n
      (a'', c''', b'') = cascade' (a', b', c'')
  in (d1', d2', a'', c''', b'')

{-
box_nfoldZ :: ! (n :: Nat) -> Circ(Vec Qubit n * Qubit * Vec Qubit n * Qubit * Qubit,
                                Qubit * Qubit * Vec Qubit n * Qubit * Vec Qubit n)
box_nfoldZ n =
  box (Vec Qubit n * Qubit * Vec Qubit n * Qubit * Qubit) $
      uncurry $ uncurry $ uncurry $ uncurry (\ y . nfoldZ n y)

testNfoldZ :: Circ(Vec Qubit 4 * Qubit * Vec Qubit 4 * Qubit * Qubit,
                                Qubit * Qubit * Vec Qubit 4 * Qubit * Vec Qubit 4)
testNfoldZ = box_nfoldZ 4
-}
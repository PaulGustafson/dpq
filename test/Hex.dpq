module Hex where

import "lib/Prelude.dpq"


-- copy out the n-th qubit from an nonempty vector. 
nthQubit :: ! (n m :: Nat) -> Vec Qubit (S (add n m)) -> WithGarbage Qubit
nthQubit n m v =
  let (before, h, after) = sf_vec_index Qubit n m v in
  do dispose before
     dispose after
     let (h', hold) = copy h in
      dispose hold >> return h'

nthQubitCirc :: ! (n m :: Nat) ->
                  exists l :: Nat . Circ(Vec Qubit (S (add n m)), Vec Qubit l * Qubit)
nthQubitCirc n m = box_garbage (Vec Qubit (S (add n m))) Qubit (\ x . nthQubit n m x)
--(Vec Qubit (S (add n m))) Qubit (nthQubit n m)

nthQubitCirc_t1 :: exists l :: Nat .
    Circ(Vec Qubit (S (add 9 9)), Vec Qubit l * Qubit)
nthQubitCirc_t1 = nthQubitCirc 9 9


update_pos :: ! (pos m :: Nat) -> 
                 Bool -> Vec Qubit (S (add pos m)) ->
	         WithGarbage (Vec Qubit (S (add pos m)))
update_pos pos m b v =
  let (before, h, after) = sf_vec_index Qubit pos m v 
      (before_cp, before') = copy before
      (after_cp, after') = copy after 
      q = initQubit b
      r = sf_vec_unindex Qubit pos m before_cp q after_cp
  in 
   do dispose before'
      dispose after'
      dispose h
      return r

boxUpdate :: ! (pos m :: Nat) -> Bool ->
                 exists n :: Nat .
                  Circ(Vec Qubit (S (add pos m)),
                        Vec Qubit n * Vec  Qubit (S (add pos m)))
boxUpdate pos m b =
  box_garbage (Vec Qubit (S (add pos m))) (Vec Qubit (S (add pos m))) $
    \ x . update_pos pos m b x

boxUpdate_t1 :: exists n :: Nat .
                  Circ(Vec Qubit (S (add 9 9)),
                        Vec Qubit n * Vec  Qubit (S (add 9 9)))
boxUpdate_t1 = boxUpdate 9 9 True


testpos :: ! (pos m xy_max :: Nat) ->
                        Vec Qubit (S (add pos m)) ->
                        Vec Qubit (S (add pos m)) ->
                        Vec Qubit (S (add pos m)) ->
  	                WithGarbage (Vec Qubit (S (add pos m)))
testpos pos m xy_max maskmap bitmap newmap =
  case pos < xy_max of
    True ->
      let (newmap, oldmap) = copy newmap
          (newmap1, newmap2) = copy newmap
      in
       do ma <- nthQubit pos m maskmap
          b <- nthQubit pos m bitmap
	  o <- nthQubit pos m oldmap
	  r <- [|band [|band (bnot ma) (bnot b)|] (bnot o)|]
          res1 <- update_pos pos m True newmap1 
          bif r res1 newmap2
    False ->
      dispose bitmap >> dispose maskmap >> return newmap

box_testpos :: ! (pos m xy_max :: Nat) ->
                  exists n :: Nat .
                   Circ(Vec  Qubit  (S  (add  pos m)) *
                     Vec  Qubit  (S  (add pos m)) * Vec  Qubit (S  (add  pos m)),
                       Vec Qubit n * Vec Qubit (S ((add pos m))))
box_testpos pos m xy_max  =
  box_garbage
    (Vec Qubit (S (add pos m)) * Vec Qubit (S (add pos m)) * Vec Qubit (S (add pos m)))
     (Vec Qubit (S (add pos m))) 
         $ uncurry $ uncurry (\ x . testpos pos m xy_max x)

box_testpos_t1 :: exists n :: Nat .
                   Circ(Vec  Qubit (S (add 9 8)) *
                     Vec  Qubit  (S (add 9 8)) * Vec  Qubit (S  (add 9 8)),
                       Vec Qubit n * Vec Qubit (S ((add 9 8))))
box_testpos_t1 = box_testpos 9 8 10
  

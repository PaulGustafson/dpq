module QftAdder where
import "test/Qft.dpq"

qft_adder_h : ! forall (m : Nat) -> Nat -> Qubit -> Vec Qubit m -> Vec Qubit m * Qubit
qft_adder_h n b l = case l of
       	     	        VNil -> (VNil, b)
                        VCons q' qs' ->
            		    let (b', c) = R n b q'
			    	(res, b'') = qft_adder_h (S n) b' qs'
		            in (VCons c res, b'')
		    

qft_adder : ! forall (n : Nat) -> Vec Qubit n -> Vec Qubit n -> Vec Qubit n * Vec Qubit n
qft_adder as bs = case bs of
                      VNil -> (as, VNil)
                      VCons b bs ->
		         let (as', b') = qft_adder_h (S Z) b as in
  			 case as' of
			  VCons c cs -> 
		            let (cs', bs') = qft_adder cs bs in
		             (VCons c cs', VCons b' bs')


adderBox : ! (n : Nat) -> Circ(Vec Qubit n * Vec Qubit n, Vec Qubit n * Vec Qubit n) 
adderBox n = box (Vec Qubit n * Vec Qubit n) $ \ x -> let (a, b) = x in qft_adder a b 

adderBox_t1 : Circ(Vec Qubit 4 * Vec Qubit 4, Vec Qubit 4 * Vec Qubit 4) 
adderBox_t1 = adderBox 4

-- adderBox_t2 = adderBox nine


extendWires : ! (n : Nat) -> Circ(Vec Qubit n, Vec Qubit n) ->
               Circ(Vec Qubit n * Vec Qubit n, Vec Qubit n * Vec Qubit n)
extendWires n circ = box (Vec Qubit n * Vec Qubit n) $
                       \ x -> let (a, b) = x in (a, (unbox circ) b)

withComputed' : ! {a b : Type} -> (Simple a, Simple b) => Circ(a, b) -> Circ(b, b) -> (a -> a)
withComputed' a b circ c = unbox $ withBasisChange circ c
  -- let circ_rev = unbox (reverse circ)
  --     c' = unbox c
  --     circ' = unbox circ
  -- in circ_rev (c' (circ' arg))


qft_adder_inplace : ! (n : Nat) -> Circ(Vec Qubit n * Vec Qubit n, Vec Qubit n * Vec Qubit n)
qft_adder_inplace n =
  box (Vec Qubit n * Vec Qubit n) $ \ x -> 
    (withComputed' (extendWires n $ qft_little_headian_Box n) (adderBox n)) x

-- qft_adder_inplace_t1 = qft_adder_inplace four

main : Circ(Vec Qubit 9  * Vec Qubit 9, Vec Qubit 9  * Vec Qubit 9)
main = qft_adder_inplace 9


qft_adder_inplace_ctrl : ! (n : Nat) -> Circ(Vec Qubit n * Vec Qubit n * Vec Qubit n, Vec Qubit n * Vec Qubit n * Vec Qubit n)
qft_adder_inplace_ctrl n =
  box (Vec Qubit n * Vec Qubit n * Vec Qubit n) $ \ x ->
     (uncurry $ controlled (qft_adder_inplace n)) x

main3 = qft_adder_inplace_ctrl 9
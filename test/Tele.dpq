module Tele where

import "lib/Prelude.dpq"


share : ! (Qubit -> Qubit * Qubit)
share a = let b = Init0 ()
       	      (b, a) = CNot b a
	   in (a, b)

plus_minus : ! (Bool -> Circ(Unit, Qubit))
plus_minus b = 
               box Unit $ \ u ->
                case b of
                  True -> H (Init1 ())
                  False -> H (Init0 ())



shareCirc : Circ (Qubit, Qubit * Qubit) 
shareCirc = box Qubit share
 

bell00 : Circ (Unit, Qubit * Qubit) 
bell00 =  box Unit $
          \ t ->
           let -- f = unbox $ plus_minus False
               a = unbox (plus_minus False) () 
       	       (a, b) = share a
	   in (a, b)


alice : ! (Qubit * Qubit -> Bit * Bit)
alice p = let (q, a) = p 
              (a', q') = CNot a q
              q'' = H q' in (Mea q'', Mea a')
	    

aliceCirc : Circ(Qubit * Qubit, Bit * Bit) 
aliceCirc = box (Qubit * Qubit) alice


bob : ! (Qubit * (Bit * Bit) -> Qubit)
bob a = let (b, u) = a 
            (x, y) = u
            (b, y) = C_X b y
            (b, x) = C_Z b x
            dx = Discard x 
	    dy = Discard y 
	  in b

bobCirc : Circ(Qubit * (Bit * Bit), Qubit) 
bobCirc = box (Qubit * (Bit * Bit)) bob


tele : ! (Qubit -> Qubit)
tele q = let (a, b) = unbox bell00 ()
             (x, y) = alice (q, a) 
             b = bob (b, (x, y)) in b

teleCirc : Circ (Qubit, Qubit)
teleCirc = box Qubit tele


plus_minus_generic : ! (n : Nat) -> Bool -> Vec Qubit n
plus_minus_generic n b = let qs = initVec n b in map H qs


share_generic : ! (n : Nat) -> Vec Qubit n -> Vec Qubit n * Vec Qubit n
share_generic n l =
  let res = initVec n False
      (res', l) = unzip $ zipWith CNot res l
  in (l, res')

shareCircG : Circ (Vec Qubit (S (S Z)), Vec Qubit (S (S Z)) * Vec Qubit (S (S Z)))            
shareCircG = box (Vec Qubit (S (S Z))) $ \ x -> share_generic (S (S Z)) x



bell_generic : ! (n : Nat) -> Vec Qubit n * Vec Qubit n
bell_generic n =
    let a = plus_minus_generic n False
        (a, b) = share_generic n a
    in (a, b)

bell_g_box : ! (n : Nat) -> Circ(Unit, Vec Qubit n * Vec Qubit n)
bell_g_box n = box Unit $ \ u ->  bell_generic n


alice_generic : ! (n : Nat) -> Vec Qubit n -> Vec Qubit n -> Vec Bit n * Vec Bit n
alice_generic n q a = let (a', q') = unzip $ zipWith CNot a q
                          q'' = map H q'        
                       in (map Mea q'', map Mea a')

alice_g_box : ! (n : Nat) -> Circ (Vec Qubit n * Vec Qubit n, Vec Bit n * Vec Bit n)
alice_g_box n = box (Vec Qubit n * Vec Qubit n) $
      \ x -> let (q, a) = x in alice_generic n q a
                  


bob_generic : ! (n : Nat) -> Vec Qubit n -> (Vec Bit n * Vec Bit n) -> Vec Qubit n
bob_generic n b u = let (x, y) = u
                        (b, y) = unzip $ zipWith C_X b y
                        (b, x) = unzip $ zipWith C_Z b x
     		        dx = disB x 
	                dy = disB y 
                      in b

bob_g_box : ! (n : Nat) -> Circ (Vec Qubit n * (Vec Bit n * Vec Bit n), Vec Qubit n)
bob_g_box n = box (Vec Qubit n * (Vec Bit n * Vec Bit n)) $
              \ x -> let (q, a) = x in bob_generic n q a

tele_generic : ! (n : Nat) -> Vec Qubit n -> Vec Qubit n
tele_generic n q = let (a, b) = bell_generic n
                       (x, y) = alice_generic n q a
                       b = bob_generic n b (x, y) in b

teleBox : ! (n : Nat) -> Circ(Vec Qubit n, Vec Qubit n)
teleBox n = box (Vec Qubit n) $ \ x -> tele_generic n x

teleBox_t1 : Circ (Vec Qubit 9, Vec Qubit 9)
teleBox_t1 = teleBox 9

teleBox' : ! (n : Nat) -> Circ(Vec Qubit n, Vec Qubit n)
teleBox' n = box (Vec Qubit n) $ \ x -> tele_generic n x



coin : !(Unit -> Qubit)
coin x = H $ initQubit False

main : Circ(Unit, Qubit)
main = box Unit coin
